"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeCmd = void 0;
const node_child_process_1 = require("node:child_process");
const config_1 = require("../config");
const env = Object.assign(Object.assign({}, process.env), { DATABASE_URL: `file:${config_1.config.databasePath}` });
function executeCmd(cmd) {
    try {
        (0, node_child_process_1.execSync)(cmd, {
            env,
            stdio: 'inherit',
        });
    }
    catch (err) {
        console.log('Error initializing database:');
        console.log(err);
    }
}
exports.executeCmd = executeCmd;
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('Deploying the database migrations');
        executeCmd('prisma migrate deploy');
        console.log('Generating prisma client');
        executeCmd('prisma generate');
    });
}
if (require.main === module) {
    (() => __awaiter(void 0, void 0, void 0, function* () { return yield main(); }))();
}
exports.default = main;
