"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ChromeDriverManager_1 = __importDefault(require("../../src/device-managers/ChromeDriverManager"));
const support_1 = require("@appium/support");
const chromeUtils_1 = require("../../src/chromeUtils");
describe('Chrome Driver Manager', function () {
    this.timeout(500000);
    it.skip('Should fetch chrome driver for given version', () => __awaiter(this, void 0, void 0, function* () {
        const chromeDriverManager = yield ChromeDriverManager_1.default.getInstance();
        yield chromeDriverManager.downloadChromeDriver(83);
        yield chromeDriverManager.downloadChromeDriver(84);
        (yield support_1.fs.readdir(yield (0, chromeUtils_1.getChromedriverBinaryPath)((0, chromeUtils_1.getModuleRoot)()))).length.should.be.eql(3);
    }));
});
