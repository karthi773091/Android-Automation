"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ip_1 = __importDefault(require("ip"));
const sinon_1 = __importDefault(require("sinon"));
const IOSDeviceManager_1 = __importDefault(require("../../src/device-managers/IOSDeviceManager"));
const Helper = __importStar(require("../../src/helpers"));
const DeviceUtils = __importStar(require("../../src/device-utils"));
const chai_1 = require("chai");
const axios_1 = __importDefault(require("axios"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
let sandbox = sinon_1.default.createSandbox();
const firstNode = ip_1.default.address();
const secondNode = ip_1.default.address();
const cliArgs = {
    'device-farm': {
        platform: 'iOS',
        'device-types': 'both',
        hub: `http://${firstNode}:3000`,
    },
};
describe.skip('Remote IOS', () => {
    const stubResponse = {
        data: [
            {
                name: 'iPad Air (4th generation)',
                udid: 'F9C2FD71-A5A3-4E0A-A8CD-BE96BF907ABF',
                state: 'Shutdown',
                sdk: '14.2',
                platform: 'ios',
                wdaLocalPort: 62879,
                busy: false,
                realDevice: false,
                deviceType: 'simulator',
                host: `http://${firstNode}:31337`,
                offline: false,
                meta: {
                    revision: 0,
                    created: 1661836020465,
                    version: 0,
                },
                $loki: 1,
            },
            {
                name: 'iPad (8th generation)',
                udid: '3F74FBC0-D50E-4317-8C33-428C1CE55C27',
                state: 'Shutdown',
                sdk: '14.2',
                platform: 'ios',
                wdaLocalPort: 62878,
                busy: false,
                realDevice: false,
                deviceType: 'simulator',
                host: `http://${firstNode}:31337`,
                offline: false,
                meta: {
                    revision: 0,
                    created: 1661836020465,
                    version: 0,
                },
                $loki: 2,
            },
        ],
    };
    let stub;
    afterEach(() => {
        stub.restore();
    });
    it('Fetch remote devices', function () {
        return __awaiter(this, void 0, void 0, function* () {
            stub = sinon_1.default.stub(axios_1.default, 'post').resolves(stubResponse);
            const iosDevices = new IOSDeviceManager_1.default();
            const simulators = [];
            sandbox.stub(iosDevices, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
            sandbox.stub(iosDevices, 'getOSVersion').returns('14.1.1');
            sandbox.stub(iosDevices, 'getDeviceName').returns('Sai’s iPhone');
            sandbox.stub(Helper, 'getFreePort').returns(54093);
            sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
            const devices = yield iosDevices.getDevices('both', [], { port: 4723, plugin: cliArgs });
            const expected = [
                {
                    wdaLocalPort: 54093,
                    udid: '00001111-00115D822222002E',
                    sdk: '14.1.1',
                    name: 'Sai’s iPhone',
                    busy: false,
                    realDevice: true,
                    deviceType: 'real',
                    platform: 'ios',
                    host: 'http://127.0.0.1:4723',
                    derivedDataPath: path_1.default.join(os_1.default.homedir(), 'Library/Developer/Xcode/DerivedData/WebDriverAgent-00001111-00115D822222002E'),
                    mjpegServerPort: 54093,
                    sessionStartTime: 0,
                    totalUtilizationTimeMilliSec: 0,
                },
                {
                    name: 'iPad (8th generation)',
                    udid: '3F74FBC0-D50E-4317-8C33-428C1CE55C27',
                    state: 'Shutdown',
                    sdk: '14.2',
                    platform: 'ios',
                    wdaLocalPort: 62878,
                    busy: false,
                    realDevice: false,
                    deviceType: 'simulator',
                    host: `http://${firstNode}:3000`,
                    offline: false,
                },
            ];
            (0, chai_1.expect)(devices).to.deep.equal(expected);
        });
    });
});
