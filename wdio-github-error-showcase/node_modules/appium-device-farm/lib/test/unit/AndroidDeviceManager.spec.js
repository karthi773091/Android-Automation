"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sinon_1 = __importDefault(require("sinon"));
const chai_1 = __importStar(require("chai"));
const AndroidDeviceManager_1 = __importDefault(require("../../src/device-managers/AndroidDeviceManager"));
const Helper = __importStar(require("../../src/helpers"));
const DeviceUtils = __importStar(require("../../src/device-utils"));
const GetAdbOriginal_1 = require("./GetAdbOriginal");
const ip_1 = __importDefault(require("ip"));
const lodash_1 = __importDefault(require("lodash"));
const IPluginArgs_1 = require("../../src/interfaces/IPluginArgs");
const db_1 = require("../../src/data-service/db");
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const uuid_1 = require("uuid");
chai_1.default.use(chai_as_promised_1.default);
const sandbox = sinon_1.default.createSandbox();
let adb;
let cloneAdb;
describe('Android Device Manager', function () {
    this.timeout(500000);
    afterEach(function () {
        sandbox.restore();
    });
    function getCloneAdb() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield adb.clone({
                remoteAdbHost: '192.168.0.104',
                adbPort: 5037,
                udid: null,
                appDeviceReadyTimeout: null,
                useKeystore: null,
                keystorePath: null,
                keystorePassword: null,
                keyAlias: null,
                keyPassword: null,
                curDeviceId: null,
                emulatorPort: null,
                logcat: null,
                tags: [],
                instrumentProc: null,
                suppressKillServer: null,
                jars: {},
                adbHost: '192.168.0.104',
                adbExecTimeout: 20000,
                remoteAppsCacheLimit: 10,
                buildToolsVersion: null,
                allowOfflineDevices: false,
                allowDelayAdb: true,
            });
        });
    }
    it('Android Device List to have added state', () => __awaiter(this, void 0, void 0, function* () {
        const androidDevices = new AndroidDeviceManager_1.default(Object.assign({}, IPluginArgs_1.DefaultPluginArgs, { platform: 'android' }), 4723, (0, uuid_1.v4)());
        const deviceList = new Map();
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        cloneAdb = yield getCloneAdb();
        deviceList.set(adb, [{ udid: 'emulator-5554', state: 'device' }]);
        deviceList.set(cloneAdb, [{ udid: 'emulator-5555', state: 'device' }]);
        // console.log('deviceList', deviceList);
        const getConnectedDevicesStub = sandbox
            .stub(androidDevices, 'getConnectedDevices')
            .returns(Promise.resolve(deviceList));
        sandbox.stub(androidDevices, 'getDeviceSize').returns(Promise.resolve({
            screenWidth: '350',
            screenHeight: '600',
        }));
        const getDeviceVersion = sandbox.stub(androidDevices, 'getDeviceVersion');
        getDeviceVersion.onFirstCall().returns(Promise.resolve('9'));
        getDeviceVersion.onSecondCall().returns(Promise.resolve('13'));
        sandbox.stub(androidDevices, 'getDeviceName').returns(Promise.resolve('sdk_phone_x86'));
        sandbox
            .stub(androidDevices, 'getChromeVersion')
            .returns(Promise.resolve('/var/path/chromedriver'));
        const realDevice = sandbox.stub(androidDevices, 'isRealDevice');
        realDevice.onFirstCall().returns(Promise.resolve(false));
        realDevice.onSecondCall().returns(Promise.resolve(true));
        sandbox.stub(Helper, 'getFreePort').returns(Promise.resolve(54321));
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(Promise.resolve(0));
        const devices = yield androidDevices.getDevices({ androidDeviceType: 'both' }, []);
        (0, chai_1.expect)(androidDevices.getDevices({ androidDeviceType: 'both' }, [])).to.eventually.be.equal(deviceList);
        (0, chai_1.expect)(getConnectedDevicesStub.called).to.be.true;
        console.log('devices', devices);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                busy: false,
                adbRemoteHost: null,
                adbPort: 5037,
                name: 'sdk_phone_x86',
                state: 'device',
                tags: [],
                deviceType: 'emulator',
                sdk: '9',
                realDevice: false,
                udid: 'emulator-5554',
                platform: 'android',
                systemPort: 54321,
                width: '350',
                height: '600',
                liveStreaming: false,
                host: `http://${ip_1.default.address()}:4723`,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                chromeDriverPath: '/var/path/chromedriver',
                userBlocked: false,
                offline: false,
            },
            {
                busy: false,
                adbRemoteHost: '192.168.0.104',
                adbPort: 5037,
                width: '350',
                height: '600',
                tags: [],
                liveStreaming: false,
                name: 'sdk_phone_x86',
                state: 'device',
                deviceType: 'real',
                sdk: '13',
                realDevice: true,
                udid: 'emulator-5555',
                platform: 'android',
                systemPort: 54321,
                host: 'http://192.168.0.104:5037',
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                chromeDriverPath: '/var/path/chromedriver',
                userBlocked: false,
                offline: false,
            },
        ]);
    }));
    it('Android Device List to have added state - Only emulators', () => __awaiter(this, void 0, void 0, function* () {
        const androidDevices = new AndroidDeviceManager_1.default(Object.assign({}, IPluginArgs_1.DefaultPluginArgs, { platform: 'android' }), 4723, (0, uuid_1.v4)());
        const deviceList = new Map();
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        deviceList.set(adb, [
            { udid: 'emulator-5554', state: 'device' },
            { udid: 'emulator-5555', state: 'device' },
        ]);
        sandbox.stub(androidDevices, 'getConnectedDevices').returns(deviceList);
        sandbox.stub(androidDevices, 'getDeviceSize').returns(Promise.resolve({
            screenWidth: '350',
            screenHeight: '600',
        }));
        const getDeviceVersion = sandbox.stub(androidDevices, 'getDeviceVersion');
        sandbox.stub(androidDevices, 'getChromeVersion').returns('/var/path/chromedriver');
        getDeviceVersion.onFirstCall().returns('9');
        getDeviceVersion.onSecondCall().returns('13');
        sandbox.stub(androidDevices, 'getDeviceName').returns('sdk_phone_x86');
        const realDevice = sandbox.stub(androidDevices, 'isRealDevice');
        realDevice.onFirstCall().returns(false);
        realDevice.onSecondCall().returns(true);
        sandbox.stub(Helper, 'getFreePort').returns(54321);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        const devices = yield androidDevices.getDevices({ androidDeviceType: 'simulated' }, []);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                busy: false,
                adbPort: 5037,
                adbRemoteHost: null,
                name: 'sdk_phone_x86',
                state: 'device',
                deviceType: 'emulator',
                sdk: '9',
                tags: [],
                realDevice: false,
                udid: 'emulator-5554',
                platform: 'android',
                systemPort: 54321,
                width: '350',
                height: '600',
                liveStreaming: false,
                host: `http://${ip_1.default.address()}:4723`,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                chromeDriverPath: '/var/path/chromedriver',
                userBlocked: false,
                offline: false,
            },
        ]);
    }));
    it('Android Device List to have added state - Only real devices', () => __awaiter(this, void 0, void 0, function* () {
        const androidDevices = new AndroidDeviceManager_1.default(Object.assign({}, IPluginArgs_1.DefaultPluginArgs, { platform: 'android' }), 4723, (0, uuid_1.v4)());
        const deviceList = new Map();
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        deviceList.set(adb, [
            { udid: 'emulator-5554', state: 'device' },
            { udid: 'YOGAA1BBB4124', state: 'device' },
        ]);
        sandbox.stub(androidDevices, 'getConnectedDevices').returns(deviceList);
        sandbox.stub(androidDevices, 'getDeviceSize').returns(Promise.resolve({
            screenWidth: '350',
            screenHeight: '600',
        }));
        const getDeviceVersion = sandbox.stub(androidDevices, 'getDeviceVersion');
        sandbox.stub(androidDevices, 'getChromeVersion').returns('/var/path/chromedriver');
        getDeviceVersion.onFirstCall().returns('9');
        getDeviceVersion.onSecondCall().returns('13');
        sandbox.stub(androidDevices, 'getDeviceName').returns('Nexus 6');
        const realDevice = sandbox.stub(androidDevices, 'isRealDevice');
        realDevice.onFirstCall().returns(false);
        realDevice.onSecondCall().returns(true);
        sandbox.stub(Helper, 'getFreePort').returns(54322);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        const devices = yield androidDevices.getDevices({ androidDeviceType: 'real' }, []);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                busy: false,
                name: 'Nexus 6',
                adbPort: 5037,
                adbRemoteHost: null,
                state: 'device',
                deviceType: 'real',
                sdk: '13',
                tags: [],
                realDevice: true,
                udid: 'YOGAA1BBB4124',
                width: '350',
                height: '600',
                liveStreaming: false,
                platform: 'android',
                systemPort: 54322,
                host: `http://${ip_1.default.address()}:4723`,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                chromeDriverPath: '/var/path/chromedriver',
                userBlocked: false,
                offline: false,
            },
        ]);
    }));
    it('Android Device List to have host as remoteMachineProxyIP if provided', () => __awaiter(this, void 0, void 0, function* () {
        (yield db_1.ATDRepository.DeviceModel).removeDataOnly();
        const pluginArgs = Object.assign({}, IPluginArgs_1.DefaultPluginArgs, {
            platform: 'android',
            'device-types': 'both',
            skipChromeDownload: true,
            remoteMachineProxyIP: 'http://10.1.1.1:3333',
        });
        const androidDevices = new AndroidDeviceManager_1.default(pluginArgs, 4723, (0, uuid_1.v4)());
        const deviceList = new Map();
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        deviceList.set(adb, [
            { udid: 'emulator-5554', state: 'device' },
            { udid: 'YOGAA1BBB4124', state: 'device' },
        ]);
        sandbox.stub(androidDevices, 'getConnectedDevices').returns(deviceList);
        sandbox.stub(androidDevices, 'getDeviceSize').returns(Promise.resolve({
            screenWidth: '350',
            screenHeight: '600',
        }));
        const getDeviceVersion = sandbox.stub(androidDevices, 'getDeviceVersion');
        sandbox.stub(androidDevices, 'getChromeVersion').returns('/var/path/chromedriver');
        getDeviceVersion.onFirstCall().returns('9');
        getDeviceVersion.onSecondCall().returns('13');
        sandbox.stub(androidDevices, 'getDeviceName').returns('Nexus 6');
        const realDevice = sandbox.stub(androidDevices, 'isRealDevice');
        realDevice.onFirstCall().returns(false);
        realDevice.onSecondCall().returns(true);
        sandbox.stub(Helper, 'getFreePort').returns(54322);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        const devices = yield androidDevices.getDevices({ androidDeviceType: 'real' }, []);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                busy: false,
                name: 'Nexus 6',
                adbPort: 5037,
                adbRemoteHost: null,
                state: 'device',
                deviceType: 'real',
                sdk: '13',
                realDevice: true,
                tags: [],
                udid: 'YOGAA1BBB4124',
                platform: 'android',
                systemPort: 54322,
                width: '350',
                height: '600',
                liveStreaming: false,
                host: 'http://10.1.1.1:3333',
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                chromeDriverPath: '/var/path/chromedriver',
                userBlocked: false,
                offline: false,
            },
        ]);
    }));
    it("Should handle error when adb doesn't respond", () => __awaiter(this, void 0, void 0, function* () {
        // mock getDeviceProperty
        const androidDevices = new AndroidDeviceManager_1.default(Object.assign({}, IPluginArgs_1.DefaultPluginArgs, { platform: 'android' }), 4723, (0, uuid_1.v4)());
        const deviceList = new Map();
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        deviceList.set(adb, [
            { udid: 'emulator-9999', state: 'device' },
            { udid: 'emulator-7777', state: 'device' },
        ]);
        const mockAdbExec = (args) => {
            if (args.includes('emulator-9999')) {
                return Promise.reject(new Error('Adb timeout'));
            }
            else {
                return Promise.resolve('foo');
            }
        };
        sandbox.stub(androidDevices, 'getConnectedDevices').returns(deviceList);
        sandbox.stub(androidDevices, 'getChromeVersion').returns('/var/path/chromedriver');
        sandbox.stub(adb, 'adbExec').callsFake(mockAdbExec);
        const devices = yield androidDevices.getDevices({ androidDeviceType: 'both' }, []);
        const resultDevices = lodash_1.default.map(devices, (device) => {
            return { udid: device.udid };
        });
        // check that emulator-7777 is returned and emulator-9999 is not
        (0, chai_1.expect)(resultDevices).to.have.deep.members([
            {
                udid: 'emulator-7777',
            },
        ]);
        (0, chai_1.expect)(resultDevices).to.not.have.deep.members([
            {
                udid: 'emulator-9999',
            },
        ]);
    }));
    it('should handle device never completing boot', () => __awaiter(this, void 0, void 0, function* () {
        // mock getDeviceProperty
        const androidDevices = new AndroidDeviceManager_1.default(Object.assign({}, IPluginArgs_1.DefaultPluginArgs, { platform: 'android' }), 4723, (0, uuid_1.v4)());
        adb = yield (0, GetAdbOriginal_1.getAdbOriginal)();
        sandbox.stub(androidDevices, 'waitBootComplete').throwsException(new Error('Adb timeout'));
        androidDevices.onDeviceAdded(adb, {
            udid: 'emulator-9999',
            state: 'device',
        }).should.not.throw;
    }));
});
