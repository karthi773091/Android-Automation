"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sinon_1 = __importDefault(require("sinon"));
const chai_1 = require("chai");
const IOSDeviceManager_1 = __importDefault(require("../../src/device-managers/IOSDeviceManager"));
const Helper = __importStar(require("../../src/helpers"));
const DeviceUtils = __importStar(require("../../src/device-utils"));
const devices_1 = require("./fixtures/devices");
const ip_1 = __importDefault(require("ip"));
const IPluginArgs_1 = require("../../src/interfaces/IPluginArgs");
const uuid_1 = require("uuid");
const IOSUtils = __importStar(require("appium-ios-device/build/lib/utilities"));
var sandbox = sinon_1.default.createSandbox();
const cliArgs = {
    'device-farm': {
        platform: 'iOS',
        'device-types': 'both',
        remote: ['http://127.0.0.1:4723'],
    },
};
const pluginArgs = Object.assign({}, IPluginArgs_1.DefaultPluginArgs, {
    remote: [`http://${ip_1.default.address()}:4723`],
    skipChromeDownload: true,
});
describe('IOS Device Manager', () => {
    // const deviceManager = new DeviceFarmManager('ios', {androidDeviceType: 'both', iosDeviceType: 'both'}, 4723, Object.assign(pluginArgs, {}));
    afterEach(function () {
        sandbox.restore();
    });
    it('IOS Device List to have added state', () => __awaiter(void 0, void 0, void 0, function* () {
        const iosDevices = new IOSDeviceManager_1.default(pluginArgs, 4723, (0, uuid_1.v4)());
        sandbox.stub(iosDevices, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
        sandbox.stub(iosDevices, 'getOSVersion').returns('14.1.1');
        sandbox.stub(Helper, 'isMac').returns(true);
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        sandbox.stub(iosDevices, 'getDeviceName').returns('Sai’s iPhone');
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox.stub(iosDevices, 'getSimulators').returns([
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86E9999',
                state: 'Booted',
                sdk: '14.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
        const devices = yield iosDevices.getDevices({ iosDeviceType: 'both' }, []);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                udid: '00001111-00115D822222002E',
                sdk: '14.1.1',
                name: 'Sai’s iPhone',
                busy: false,
                realDevice: true,
                deviceType: 'real',
                platform: 'ios',
                tags: [],
                wdaLocalPort: 54093,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                width: '375',
                productModel: 'iPhone12,8',
                wdaBundleId: '',
                height: '667',
                host: `http://${ip_1.default.address()}:4723`,
                mjpegServerPort: 54093,
            },
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86E9999',
                state: 'Booted',
                sdk: '14.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
    }));
    it('Should consider only simulators that is given by user and all real devices', () => __awaiter(void 0, void 0, void 0, function* () {
        const simulators = [
            {
                name: 'iPhone 14',
                sdk: '16.1',
            },
            {
                name: 'iPhone 14 Plus',
                sdk: '16.1',
            },
        ];
        let iosDeviceManager = new IOSDeviceManager_1.default(Object.assign({
            platform: 'iOS',
            simulators,
        }, IPluginArgs_1.DefaultPluginArgs), 4723, (0, uuid_1.v4)());
        sandbox.stub(iosDeviceManager, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
        sandbox.stub(iosDeviceManager, 'getOSVersion').returns('14.1.1');
        sandbox.stub(iosDeviceManager, 'getDeviceName').returns('Sai’s iPhone');
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        sandbox
            .stub(iosDeviceManager, 'getLocalSims')
            .returns(devices_1.deviceMock.filter((device) => device.platform === 'iOS'));
        const devices = yield iosDeviceManager.getDevices({ iosDeviceType: 'real' }, []);
        // all devices are simulators
        devices.forEach((device) => {
            (0, chai_1.expect)(device.realDevice).to.equal(true);
        });
    }));
    it('Should consider only simulators that is given by user and not real devices', () => __awaiter(void 0, void 0, void 0, function* () {
        const simulators = [
            {
                name: 'iPhone 14',
                sdk: '16.1',
            },
            {
                name: 'iPhone 14 Plus',
                sdk: '16.1',
            },
        ];
        let iosDeviceManager = new IOSDeviceManager_1.default(Object.assign({
            platform: 'iOS',
            iosDeviceType: 'simulated',
            remote: ['http://127.0.0.1:4723'],
            simulators,
        }, IPluginArgs_1.DefaultPluginArgs), 4723, (0, uuid_1.v4)());
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(IOSDeviceManager_1.default, 'getProductModel').returns('iPhone12,8');
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox
            .stub(iosDeviceManager, 'getLocalSims')
            .returns(devices_1.deviceMock.filter((device) => device.platform === 'iOS'));
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        const devices = yield iosDeviceManager.getDevices({ iosDeviceType: 'simulated' }, []);
        // all devices are simulators
        devices.forEach((device) => {
            (0, chai_1.expect)(device.realDevice).to.be.false;
        });
    }));
    it('IOS Device List to have added state - Include simulators with real devices', () => __awaiter(void 0, void 0, void 0, function* () {
        const iosDevices = new IOSDeviceManager_1.default(IPluginArgs_1.DefaultPluginArgs, 4723, (0, uuid_1.v4)());
        sandbox.stub(iosDevices, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox.stub(iosDevices, 'getOSVersion').returns('14.1.1');
        sandbox.stub(iosDevices, 'getDeviceName').returns('Sai’s iPhone');
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        sandbox.stub(iosDevices, 'getSimulators').returns([
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
        const devices = yield iosDevices.getDevices('both', [], { port: 4723, plugin: cliArgs });
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                udid: '00001111-00115D822222002E',
                sdk: '14.1.1',
                name: 'Sai’s iPhone',
                busy: false,
                realDevice: true,
                deviceType: 'real',
                width: '375',
                productModel: 'iPhone12,8',
                wdaBundleId: '',
                height: '667',
                tags: [],
                platform: 'ios',
                wdaLocalPort: 54093,
                host: `http://${ip_1.default.address()}:4723`,
                mjpegServerPort: 54093,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
            },
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
    }));
    it('IOS Device List to have added state - Only simulators', () => __awaiter(void 0, void 0, void 0, function* () {
        const iosDevices = new IOSDeviceManager_1.default(IPluginArgs_1.DefaultPluginArgs, 4723, (0, uuid_1.v4)());
        sandbox.stub(iosDevices, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
        sandbox.stub(iosDevices, 'getOSVersion').returns('14.1.1');
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox.stub(iosDevices, 'getDeviceName').returns('Sai’s iPhone');
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        sandbox.stub(iosDevices, 'getSimulators').returns([
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
        const devices = yield iosDevices.getDevices({ iosDeviceType: 'simulated' }, []);
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
    }));
    it('IOS Device List to have added state - Only real devices', () => __awaiter(void 0, void 0, void 0, function* () {
        const iosDevices = new IOSDeviceManager_1.default(IPluginArgs_1.DefaultPluginArgs, 4723, (0, uuid_1.v4)());
        sandbox.stub(iosDevices, 'getConnectedDevices').returns(['00001111-00115D822222002E']);
        sandbox.stub(IOSUtils, 'getDeviceInfo').returns({ ProductType: 'iPhone12,8' });
        sandbox.stub(iosDevices, 'getOSVersion').returns('14.1.1');
        sandbox.stub(iosDevices, 'getDeviceName').returns('Sai’s iPhone');
        sandbox.stub(Helper, 'getFreePort').returns(54093);
        sandbox.stub(DeviceUtils, 'getUtilizationTime').returns(0);
        sandbox.stub(iosDevices, 'getSimulators').returns([
            {
                name: 'iPad Air (3rd generation)',
                udid: '0FBCBDCC-2FF1-4FCA-B034-60ABC86ED866',
                state: 'Shutdown',
                sdk: '13.5',
                platform: 'ios',
                host: `http://${ip_1.default.address()}:4723`,
            },
        ]);
        const devices = yield iosDevices.getDevices({ iosDeviceType: 'real' }, [], {
            port: 4723,
            plugin: cliArgs,
        });
        (0, chai_1.expect)(devices).to.deep.equal([
            {
                udid: '00001111-00115D822222002E',
                sdk: '14.1.1',
                name: 'Sai’s iPhone',
                busy: false,
                realDevice: true,
                tags: [],
                deviceType: 'real',
                platform: 'ios',
                wdaLocalPort: 54093,
                sessionStartTime: 0,
                totalUtilizationTimeMilliSec: 0,
                host: `http://${ip_1.default.address()}:4723`,
                width: '375',
                productModel: 'iPhone12,8',
                wdaBundleId: '',
                height: '667',
                mjpegServerPort: 54093,
            },
        ]);
    }));
});
