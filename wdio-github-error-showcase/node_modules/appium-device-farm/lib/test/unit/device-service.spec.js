"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_service_1 = require("../../src/data-service/device-service");
const db_1 = require("../../src/data-service/db");
const chai_1 = require("chai");
const semver_1 = __importDefault(require("semver"));
describe('Get device', () => {
    before('Set devices in memory', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, e_1, _b, _c;
        const devices = [
            {
                sdk: '10',
                realDevice: false,
                name: 'sdk_gphone_x86',
                busy: false,
                state: 'device',
                udid: 'emulator-5554',
                platform: 'android',
                deviceType: 'emulator',
                offline: false,
                userBlocked: false,
                host: 'http://localhost:4723',
            },
            {
                sdk: '11',
                realDevice: false,
                name: 'sdk_gphone_x86',
                busy: false,
                state: 'device',
                udid: 'emulator-5556',
                platform: 'android',
                deviceType: 'emulator',
                offline: false,
                userBlocked: false,
                host: 'http://localhost:4723',
            },
            {
                name: 'iPhone SE (2nd generation)',
                udid: 'F6A28560-7D0C-4EE9-8E1D-C1A70A350434',
                state: 'Shutdown',
                sdk: '13.0',
                platform: 'ios',
                busy: false,
                offline: false,
                realDevice: false,
                deviceType: 'simulator',
                host: 'http://localhost:4723',
                userBlocked: false,
            },
            {
                name: 'iPhone 11 Pro Max',
                udid: 'F44B044A-CBC3-4F9A-96B9-448899FEDD46',
                state: 'Shutdown',
                sdk: '14.0',
                platform: 'ios',
                busy: false,
                offline: false,
                realDevice: false,
                deviceType: 'simulator',
                host: 'http://localhost:4723',
                userBlocked: false,
            },
            {
                name: 'iPhone 11 Pro',
                udid: '18E788F1-92BC-4F91-B5F5-3858B2164088',
                state: 'Shutdown',
                sdk: '15.0',
                platform: 'ios',
                busy: false,
                offline: false,
                realDevice: false,
                deviceType: 'simulator',
                host: 'http://localhost:4723',
                userBlocked: false,
            },
            {
                name: 'Apple TV',
                udid: '8617129A-C477-44A4-9B62-319B56987CC5',
                state: 'Shutdown',
                sdk: '15.0',
                platform: 'tvos',
                busy: false,
                offline: false,
                realDevice: false,
                deviceType: 'simulator',
                userBlocked: false,
                host: 'http://localhost:4723',
            },
            {
                deviceName: 'iPhone XS',
                os_version: '15',
                platform: 'ios',
                host: 'http://hub-cloud.browserstack.com/wd/hub',
                busy: false,
                userBlocked: false,
                deviceType: 'real',
                capability: {
                    deviceName: 'iPhone XS',
                    os_version: '15',
                    platform: 'ios',
                },
                cloud: 'browserstack',
                name: 'iPhone XS',
                sdk: '15',
                udid: 'iPhone XS',
                offline: false,
            },
        ];
        (yield db_1.ATDRepository.DeviceModel).removeDataOnly();
        try {
            for (var _d = true, devices_1 = __asyncValues(devices), devices_1_1; devices_1_1 = yield devices_1.next(), _a = devices_1_1.done, !_a; _d = true) {
                _c = devices_1_1.value;
                _d = false;
                const device = _c;
                (yield db_1.ATDRepository.DeviceModel).insert(Object.assign({}, device));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = devices_1.return)) yield _b.call(devices_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }));
    it('Get android device based on filter with minSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'android',
            name: '',
            busy: false,
            offline: false,
            minSDK: '10.0.1',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        const sdk10 = semver_1.default.coerce('10');
        const sdk101 = semver_1.default.coerce('10.0.1');
        const sdk11 = semver_1.default.coerce('11.0.1');
        (0, chai_1.expect)(semver_1.default.gte(sdk10, sdk10)).to.be.true;
        (0, chai_1.expect)(semver_1.default.gte(sdk101, sdk10)).to.be.true;
        (0, chai_1.expect)(semver_1.default.gte(sdk10, sdk11)).to.be.false;
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('11');
    }));
    it('Get iOS device based on filter real device', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            deviceType: 'real',
            busy: false,
            userBlocked: false,
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.deviceType).to.be.eq('real');
    }));
    it('Get android device based on filter with minSDK and maxSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'android',
            name: '',
            busy: false,
            offline: false,
            minSDK: '10',
            maxSDK: '10.0.1',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('10');
    }));
    it('Get android device based on filter with maxSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'android',
            name: '',
            busy: false,
            offline: false,
            maxSDK: '10.0.1',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('10');
    }));
    it('Get ios simulator based on filter with minSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            busy: false,
            offline: false,
            minSDK: '14.1.0',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('15');
    }));
    it('Get ios simulator based on filter with maxSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            busy: false,
            offline: false,
            maxSDK: '14.1.0',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('14.0');
    }));
    it('Get ios simulator based on filter with minSDK and maxSDK', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            busy: false,
            offline: false,
            minSDK: '14',
            maxSDK: '14.1.0',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eq('14.0');
    }));
    it('Get android device based on filter with platformVersion', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'android',
            name: '',
            busy: false,
            offline: false,
            platformVersion: '10',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eql('10');
    }));
    it('Get ios simulator based on filter with platform', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            busy: false,
            offline: false,
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eql('13.0');
    }));
    it('Get ios simulator based on filter with platformVersion', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            //platform: 'ios',
            name: '',
            busy: false,
            offline: false,
            platformVersion: '14.0',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eql('14.0');
    }));
    it('Get android device returns undefined based on filter with platformVersion', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'android',
            name: '',
            busy: false,
            offline: false,
            platformVersion: '9',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device).to.be.undefined;
    }));
    it('Get ios simulator returns undefined based on filter with platformVersion', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'ios',
            name: '',
            busy: false,
            offline: false,
            platformVersion: '16.0',
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device).to.be.undefined;
    }));
    it('Get apple tv simulator based on filter with platformName', () => __awaiter(void 0, void 0, void 0, function* () {
        const filterOptions = {
            platform: 'tvos',
            name: '',
            busy: false,
            offline: false,
        };
        const device = yield (0, device_service_1.getDevice)(filterOptions);
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.platform).to.be.eql('tvos');
        (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.eql('15.0');
        if (device === null || device === void 0 ? void 0 : device.sdk) {
            (0, chai_1.expect)(parseFloat(device === null || device === void 0 ? void 0 : device.sdk)).to.be.gte(14.1);
        }
        else {
            (0, chai_1.expect)(device === null || device === void 0 ? void 0 : device.sdk).to.be.not.undefined;
        }
    }));
});
