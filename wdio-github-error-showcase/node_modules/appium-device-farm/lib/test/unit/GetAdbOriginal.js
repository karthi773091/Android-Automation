"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAdbOriginal = void 0;
const appium_adb_1 = __importDefault(require("appium-adb"));
function getAdbOriginal() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield appium_adb_1.default.createADB({
            udid: null,
            appDeviceReadyTimeout: null,
            useKeystore: null,
            keystorePath: null,
            keystorePassword: null,
            keyAlias: null,
            keyPassword: null,
            curDeviceId: null,
            emulatorPort: null,
            logcat: null,
            instrumentProc: null,
            suppressKillServer: null,
            jars: {},
            adbPort: 5037,
            adbHost: null,
            adbExecTimeout: 20000,
            remoteAppsCacheLimit: 10,
            buildToolsVersion: null,
            allowOfflineDevices: false,
            allowDelayAdb: true,
        });
    });
}
exports.getAdbOriginal = getAdbOriginal;
