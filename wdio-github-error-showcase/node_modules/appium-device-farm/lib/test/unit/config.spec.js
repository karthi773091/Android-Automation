"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const device_utils_1 = require("../../src/device-utils");
const chai_1 = require("chai");
describe('Config Test', () => {
    it('Should be able to load data from absolute path from config', () => __awaiter(void 0, void 0, void 0, function* () {
        const deviceConfigPath = path_1.default.resolve(__dirname, './fixtures/device.config.js');
        (0, chai_1.expect)((0, device_utils_1.isDeviceConfigPathAbsolute)(deviceConfigPath)).to.be.true;
    }));
    it('Should throw error when path is not absolute', () => __awaiter(void 0, void 0, void 0, function* () {
        const deviceConfigPath = './fixtures/device.config.js';
        (0, chai_1.expect)(() => (0, device_utils_1.isDeviceConfigPathAbsolute)(deviceConfigPath)).to.throw('Device Config Path ./fixtures/device.config.js should be absolute');
    }));
});
