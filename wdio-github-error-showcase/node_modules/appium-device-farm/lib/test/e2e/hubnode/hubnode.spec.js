"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ip_1 = __importDefault(require("ip"));
// we are using custom plugin harness as we want to run two instance of device-farm simultaneously
const plugin_harness_1 = require("../plugin-harness");
const webdriverio_1 = require("webdriverio");
const e2ehelper_1 = require("../e2ehelper");
const axios_1 = __importDefault(require("axios"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const chai = __importStar(require("chai"));
const mocha_1 = require("mocha");
chai.use(chai_as_promised_1.default);
let driver;
const APPIUM_HOST = ip_1.default.address();
const APPIUM_PORT = 4723;
const WDIO_PARAMS = {
    connectionRetryCount: 0,
    hostname: APPIUM_HOST,
    port: APPIUM_PORT,
    logLevel: 'info',
};
const capabilities = {
    'appium:automationName': 'UiAutomator2',
    'appium:app': 'https://prod-mobile-artefacts.lambdatest.com/assets/docs/proverbial_android.apk',
    platformName: 'android',
    'appium:deviceName': '',
    'appium:uiautomator2ServerInstallTimeout': 90000,
};
let hubReady = false;
let nodeReady = false;
describe('E2E Hub and Node', () => {
    console.log('Before all');
    // dump hub config into a file
    const hub_config_file = (0, e2ehelper_1.ensureHubConfig)('android', 'real', 'simulated');
    // dump node config into a file
    const node_config_file = (0, e2ehelper_1.ensureNodeConfig)();
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)('hub', true);
    const APPIUM_HOME_NODE = (0, e2ehelper_1.ensureAppiumHome)('node', true);
    console.log(`Hub config file: ${hub_config_file}`);
    // run hub
    const hubProcess = (0, plugin_harness_1.pluginE2EHarness)({
        before: undefined,
        after: global.after,
        configFile: hub_config_file,
        pluginName: 'device-farm',
        host: e2ehelper_1.hub_config.bindHostOrIp,
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    // run node
    const nodeProcess = (0, plugin_harness_1.pluginE2EHarness)({
        before: undefined,
        after: global.after,
        configFile: node_config_file,
        pluginName: 'device-farm',
        port: e2ehelper_1.NODE_APPIUM_PORT,
        host: e2ehelper_1.node_config.bindHostOrIp,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME_NODE,
    });
    function waitForHubAndNode() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!hubReady) {
                console.log('Waiting for hub to be ready');
                yield hubProcess.startPlugin();
                hubReady = true;
            }
            if (!nodeReady) {
                console.log('Waiting for node to be ready');
                yield nodeProcess.startPlugin();
                nodeReady = true;
            }
        });
    }
    it('should have devices on the hub', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        // check device-farm endpoint using axios
        const res = yield axios_1.default.get(`http://${APPIUM_HOST}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`);
        (0, chai_1.expect)(res.status).to.equal(200);
        (0, chai_1.expect)(res.data.length).to.be.greaterThan(0);
        // one of the devices should be an android device from the node
        const androidDevices = res.data.filter((device) => device.platform === 'android');
        (0, chai_1.expect)(androidDevices.length).to.be.greaterThan(0);
        const nodeAndroidDevices = androidDevices.filter((device) => device.host.includes(e2ehelper_1.NODE_APPIUM_PORT.toString()) &&
            device.host.includes(e2ehelper_1.node_config.bindHostOrIp));
        (0, chai_1.expect)(nodeAndroidDevices.length).to.be.greaterThan(0);
    }));
    it('Vertical swipe test', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        console.log(`Device UDID: ${yield driver.capabilities.deviceUDID}`);
        yield driver.performActions([
            {
                type: 'pointer',
                id: 'finger1',
                parameters: { pointerType: 'touch' },
                actions: [
                    { type: 'pointerMove', duration: 0, x: 100, y: 100 },
                    { type: 'pointerDown', button: 0 },
                    { type: 'pause', duration: 500 },
                    { type: 'pointerMove', duration: 1000, origin: 'pointer', x: -50, y: 0 },
                    { type: 'pointerUp', button: 0 },
                ],
            },
        ]);
        console.log('Successfully swiped');
    }));
    it('serve device-farm endpoint when test is still running', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        // check device-farm endpoint using axios
        const res = yield axios_1.default.get(`http://${APPIUM_HOST}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm`);
        (0, chai_1.expect)(res.status).to.equal(200);
    }));
    it('Clean pending session when session failed to start', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        // ask appium to launch non-existent app package and app activity
        const nonExistentAppCapabilities = {
            'appium:automationName': 'UiAutomator2',
            'appium:appPackage': 'com.nonexistent',
            'appium:appActivity': 'com.nonexistent.MainActivity',
            platformName: 'android',
            'appium:deviceName': '',
            'appium:uiautomator2ServerInstallTimeout': 90000,
        };
        yield (0, chai_1.expect)((0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities: nonExistentAppCapabilities }))).to.eventually.be.rejected;
        // check device-farm endpoint using axios: /api/queue/length
        const res = yield axios_1.default.get(`http://${APPIUM_HOST}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/queue/length`);
        (0, chai_1.expect)(res.status).to.equal(200);
        (0, chai_1.expect)(res.data).to.equal(0);
    }));
    it('Propagate error when session failed to be created', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        // ask appium to launch non-existent app package and app activity
        const nonExistentAppCapabilities = {
            'appium:automationName': 'UiAutomator2',
            'appium:appPackage': 'com.nonexistent',
            'appium:appActivity': 'com.nonexistent.MainActivity',
            platformName: 'android',
            'appium:deviceName': '',
            'appium:uiautomator2ServerInstallTimeout': 90000,
        };
        yield (0, chai_1.expect)((0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities: nonExistentAppCapabilities }))).to.eventually.be.rejectedWith("An unknown server-side error occurred while processing the command. Original error: Error: Either provide 'app' option to install 'com.nonexistent' or consider setting 'noReset' to 'true' if 'com.nonexistent' is supposed to be preinstalled.");
    }));
    (0, mocha_1.afterEach)(function () {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (driver !== undefined) {
                    yield driver.deleteSession();
                    driver = undefined;
                }
            }
            catch (err) {
                console.log('Unable to delete driver session');
            }
        });
    });
});
