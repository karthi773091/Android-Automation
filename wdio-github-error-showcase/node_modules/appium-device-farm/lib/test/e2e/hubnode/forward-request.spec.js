"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
// we are using custom plugin harness as we want to run two instance of device-farm simultaneously
const plugin_harness_1 = require("../plugin-harness");
const webdriverio_1 = require("webdriverio");
const e2ehelper_1 = require("../e2ehelper");
const axios_1 = __importDefault(require("axios"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const chai = __importStar(require("chai"));
const e2ehelper_2 = require("../e2ehelper");
chai.use(chai_as_promised_1.default);
let driver;
const WDIO_PARAMS = {
    connectionRetryCount: 0,
    hostname: e2ehelper_2.hub_config.bindHostOrIp,
    port: e2ehelper_1.HUB_APPIUM_PORT,
    logLevel: 'info',
    path: '/',
};
let hubReady = false;
let nodeReady = false;
const capabilities = {
    'appium:automationName': 'UiAutomator2',
    'appium:app': 'https://prod-mobile-artefacts.lambdatest.com/assets/docs/proverbial_android.apk',
    platformName: 'android',
    'appium:deviceName': '',
    'appium:uiautomator2ServerInstallTimeout': 90000,
};
const NEW_COMMAND_TIMEOUT_SECS = 10;
describe('E2E Forward Request', () => {
    console.log('Before all');
    // dump hub config into a file
    const hub_config_file = (0, e2ehelper_1.ensureHubConfig)('android', 'real', 'real', {
        newCommandTimeoutSec: NEW_COMMAND_TIMEOUT_SECS,
    });
    // dump node config into a file
    const node_config_file = (0, e2ehelper_1.ensureNodeConfig)();
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)('hub', true);
    const APPIUM_HOME_NODE = (0, e2ehelper_1.ensureAppiumHome)('node', true);
    console.log(`Hub config file: ${hub_config_file}`);
    // run hub
    const hubProcess = (0, plugin_harness_1.pluginE2EHarness)({
        before: undefined,
        after: global.after,
        configFile: hub_config_file,
        pluginName: 'device-farm',
        host: e2ehelper_2.hub_config.bindHostOrIp,
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    // run node
    const nodeProcess = (0, plugin_harness_1.pluginE2EHarness)({
        before: undefined,
        after: global.after,
        configFile: node_config_file,
        pluginName: 'device-farm',
        port: e2ehelper_1.NODE_APPIUM_PORT,
        host: e2ehelper_2.node_config.bindHostOrIp,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME_NODE,
    });
    function waitForHubAndNode() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!hubReady) {
                console.log('Waiting for hub to be ready');
                yield hubProcess.startPlugin();
                hubReady = true;
            }
            if (!nodeReady) {
                console.log('Waiting for node to be ready');
                yield nodeProcess.startPlugin();
                nodeReady = true;
            }
        });
    }
    it('node can handle appium request on its own (hub still need to run)', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        const node_wdio_params = Object.assign({}, WDIO_PARAMS, {
            hostname: e2ehelper_2.node_config.bindHostOrIp,
            port: e2ehelper_1.NODE_APPIUM_PORT,
        });
        console.log(`Node wdio params: ${JSON.stringify(node_wdio_params)}`);
        console.log(`node config: ${JSON.stringify(e2ehelper_2.node_config)}`);
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, node_wdio_params), { capabilities }));
        (0, chai_1.expect)(driver).to.be.not.undefined;
    }));
    it('can forward session request to node', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        if (e2ehelper_2.hub_config.bindHostOrIp == e2ehelper_2.node_config.bindHostOrIp) {
            it.skip('node and hub should not be using the same host');
        }
        // hub and node should be running
        const hub_url = `http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}`;
        const node_url = `http://${e2ehelper_2.node_config.bindHostOrIp}:${e2ehelper_1.NODE_APPIUM_PORT}`;
        console.log(`Hub url: ${hub_url}`);
        (0, chai_1.expect)(axios_1.default.get(`${hub_url}/device-farm`)).to.eventually.equal(200, 'hub should be running');
        (0, chai_1.expect)(axios_1.default.get(`${node_url}/device-farm`)).to.eventually.equal(200, 'node should be running');
        // all devices
        const allDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        // there should be at least one device
        // expect(allDevices.length).to.be.greaterThan(0);
        // wait until there is at least one device
        // one of the device should come from node
        const nodeDevice = allDevices.filter((device) => { var _a; return (_a = device.host) === null || _a === void 0 ? void 0 : _a.includes(e2ehelper_2.node_config.bindHostOrIp); });
        (0, chai_1.expect)(nodeDevice).to.not.be.undefined;
        console.log(`Node device: ${JSON.stringify(nodeDevice)}`);
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        // busy device should be on the node
        const newAllDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        const busyDevice = newAllDevices.filter((device) => device.busy);
        // device should have host as node_config.bindHostOrIp
        (0, chai_1.expect)(busyDevice[0]).to.have.property('host').that.includes(e2ehelper_2.node_config.bindHostOrIp);
        (0, chai_1.expect)(busyDevice[0]).to.have.property('host').that.not.includes(e2ehelper_2.hub_config.bindHostOrIp);
    }));
    it('update lastCmdExecutedAt when forwarding request', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        if (e2ehelper_2.hub_config.bindHostOrIp == e2ehelper_2.node_config.bindHostOrIp) {
            it.skip('node and hub should not be using the same host');
        }
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        const allDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        const busyDevice = allDevices.filter((device) => device.busy);
        const lastCmdExecutedAt = busyDevice[0].lastCmdExecutedAt;
        // lastCmdExecutedAt should not be empty
        (0, chai_1.expect)(lastCmdExecutedAt).to.not.be.undefined;
        // run a command
        yield driver.getPageSource();
        // check lastCmdExecutedAt
        const newAllDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        const newBusyDevice = newAllDevices.filter((device) => device.udid === busyDevice[0].udid && device.host === busyDevice[0].host);
        const newLastCmdExecutedAt = newBusyDevice[0].lastCmdExecutedAt;
        // lastCmdExecutedAt should not be empty
        (0, chai_1.expect)(newLastCmdExecutedAt).to.not.be.undefined;
        // lastCmdExecutedAt should be greater than the previous one
        (0, chai_1.expect)(newLastCmdExecutedAt).to.be.greaterThan(lastCmdExecutedAt);
        // print out the device
        console.log(`Busy device: ${JSON.stringify(newBusyDevice)}`);
    }));
    it.only('does not unblock device when cmd is sent before newCommandTimeoutSec', () => __awaiter(void 0, void 0, void 0, function* () {
        yield waitForHubAndNode();
        if (e2ehelper_2.hub_config.bindHostOrIp == e2ehelper_2.node_config.bindHostOrIp) {
            it.skip('node and hub should not be using the same host');
        }
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        const allDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        const busyDevice = allDevices.filter((device) => device.busy);
        // keep sending command every 5 seconds for 20 seconds
        const interval = setInterval(() => __awaiter(void 0, void 0, void 0, function* () {
            yield driver.getPageSource();
        }), 5000);
        // wait for 20 seconds
        yield new Promise((resolve) => setTimeout(resolve, (NEW_COMMAND_TIMEOUT_SECS + 10) * 1000));
        clearInterval(interval);
        // check device status
        const newAllDevices = (yield axios_1.default.get(`http://${e2ehelper_2.hub_config.bindHostOrIp}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`)).data;
        const newBusyDevice = newAllDevices.filter((device) => device.udid === busyDevice[0].udid && device.host === busyDevice[0].host);
        // device should be busy
        (0, chai_1.expect)(newBusyDevice[0].busy).to.be.true;
    }));
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (driver !== undefined) {
                yield driver.deleteSession();
                driver = undefined;
            }
        });
    });
});
