"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureNodeConfig = exports.ensureHubConfig = exports.ensureAppiumHome = exports.ensureTempDir = exports.node_config = exports.hub_config = exports.PLUGIN_PATH = exports.NODE_APPIUM_PORT = exports.HUB_APPIUM_PORT = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const ip_1 = __importDefault(require("ip"));
const IPluginArgs_1 = require("../../src/interfaces/IPluginArgs");
const ifaces = os_1.default.networkInterfaces();
/**
 {
  lo0: [
    {
      address: '127.0.0.1',
      netmask: '255.0.0.0',
      family: 'IPv4',
      mac: '00:00:00:00:00:00',
      internal: true,
      cidr: '127.0.0.1/8'
    }
  ]
}
 */
const localIp = ip_1.default.address();
const ifaceNames = Object.keys(ifaces);
// find first ip address coming from device other than localIp
const availableIpAddresses = ifaceNames
    .map((device) => {
    var _a;
    return (_a = ifaces[device].find((iface) => iface.family === 'IPv4')) === null || _a === void 0 ? void 0 : _a.address;
})
    .filter((ip) => ip !== undefined);
// find first ip address coming from device other than localIp
let alternateIp = availableIpAddresses.find((ip) => ip !== localIp);
if (alternateIp === undefined)
    alternateIp = localIp;
console.log(`Using localIp: ${localIp}`);
console.log(`Using alternateIp: ${alternateIp}`);
exports.HUB_APPIUM_PORT = 4723;
exports.NODE_APPIUM_PORT = 4724;
exports.PLUGIN_PATH = path_1.default.resolve(__dirname + '/../..');
exports.hub_config = Object.assign({}, IPluginArgs_1.DefaultPluginArgs, {
    hub: undefined,
    bindHostOrIp: localIp,
});
exports.node_config = Object.assign({}, IPluginArgs_1.DefaultPluginArgs, {
    hub: `http://${exports.hub_config.bindHostOrIp}:${exports.HUB_APPIUM_PORT}`,
    bindHostOrIp: alternateIp,
});
function ensureTempDir() {
    const tempDir = path_1.default.resolve(__dirname + '/../../temp-appium');
    if (!fs_1.default.existsSync(tempDir)) {
        fs_1.default.mkdirSync(tempDir);
    }
    return tempDir;
}
exports.ensureTempDir = ensureTempDir;
function ensureAppiumHome(suffix = '', deleteExisting = true) {
    const newHome = path_1.default.resolve(path_1.default.join(__dirname, '/../../temp-appium', suffix));
    if (!fs_1.default.existsSync(newHome)) {
        fs_1.default.mkdirSync(newHome);
    }
    // check if there's already extensions.yaml under node_modules/.cache/appium
    const extensionsYaml = path_1.default.join(newHome, 'node_modules', '.cache', 'appium', 'extensions.yaml');
    // log a warning as appium won't be able to install the plugin
    if (fs_1.default.existsSync(extensionsYaml)) {
        console.log(`WARNING: ${extensionsYaml} already exists. Appium won't be able to install the plugin`);
        if (deleteExisting) {
            console.log(`Deleting ${extensionsYaml}`);
            fs_1.default.unlinkSync(extensionsYaml);
        }
    }
    return newHome;
}
exports.ensureAppiumHome = ensureAppiumHome;
function ensureHubConfig(platform = 'android', iosDeviceType = 'both', androidDeviceType = 'both', moreConfig = {}) {
    return ensureConfig('hub-config.json', {
        server: {
            port: exports.HUB_APPIUM_PORT,
            plugin: {
                'device-farm': Object.assign(exports.node_config, {
                    platform,
                    androidDeviceType,
                    iosDeviceType,
                }, moreConfig),
            },
        },
    });
}
exports.ensureHubConfig = ensureHubConfig;
function ensureNodeConfig(platform = 'android', iosDeviceType = 'both', androidDeviceType = 'both', moreConfig = {}) {
    return ensureConfig('node-config.json', {
        server: {
            port: exports.NODE_APPIUM_PORT,
            plugin: {
                'device-farm': Object.assign(exports.node_config, {
                    platform,
                    androidDeviceType,
                    iosDeviceType,
                }),
            },
        },
    });
}
exports.ensureNodeConfig = ensureNodeConfig;
function ensureConfig(filename, config) {
    const config_file = ensureTempDir() + '/' + filename;
    fs_1.default.writeFileSync(config_file, JSON.stringify(config));
    return config_file;
}
