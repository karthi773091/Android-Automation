"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginE2EHarness = void 0;
const support_1 = require("appium/support");
const get_port_1 = __importDefault(require("get-port"));
const log_symbols_1 = require("log-symbols");
const teen_process_1 = require("teen_process");
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const fs_1 = __importDefault(require("fs"));
const ip_1 = __importDefault(require("ip"));
/**
 * Creates hooks to install a driver and a plugin and starts an Appium server w/ the given extensions.
 * @param {E2ESetupOpts} opts
 * @returns {void}
 */
function pluginE2EHarness(opts) {
    let { appiumHome, before, after, configFile, driverSource, driverPackage, driverName, driverSpec, pluginSource, pluginPackage, pluginSpec, pluginName, port, host, enableGoIos, } = opts;
    let server;
    function goIosPath() {
        return __awaiter(this, void 0, void 0, function* () {
            const appium_path = path_1.default.dirname(require.resolve('appium'));
            console.log(`${log_symbols_1.info} appium_path: ${appium_path}`);
            const node_modules_root = (yield (0, teen_process_1.exec)('npm', ['root', '-g'])).stdout.trim();
            console.log(`${log_symbols_1.info} node_modules_root: ${node_modules_root}`);
            const platform_name = process.platform;
            const arch_name = process.arch;
            const go_ios_dir = path_1.default.join(node_modules_root, 'go-ios');
            // find ios binary matching platform name
            let go_ios_bin = fs_1.default.readdirSync(go_ios_dir, { recursive: true }).find((item) => {
                console.log(`${log_symbols_1.info} item: ${item}`);
                return item.includes(platform_name);
            });
            console.log(`${log_symbols_1.info} platform: ${platform_name} arch: ${arch_name} go_ios_bin: ${go_ios_bin}`);
            if (!go_ios_bin) {
                // throw new Error(`go-ios binary not found for platform ${platform_name}`);
                go_ios_bin = '';
                console.log(`${log_symbols_1.warning} go-ios binary not found for platform ${platform_name}`);
            }
            const full_path = path_1.default.join(go_ios_dir, go_ios_bin.toString(), 'ios');
            return full_path;
        });
    }
    // return appium binary path based on APPIUM_HOME
    function getAppiumBin() {
        return require.resolve('appium');
    }
    function startPlugin() {
        return __awaiter(this, void 0, void 0, function* () {
            const setupAppiumHome = () => __awaiter(this, void 0, void 0, function* () {
                /**
                 * @type {AppiumEnv}
                 */
                const env = Object.assign({}, process.env);
                if (appiumHome) {
                    env.APPIUM_HOME = appiumHome;
                    //env.HOME = appiumHome;
                    yield support_1.fs.mkdirp(appiumHome);
                    console.log(`${log_symbols_1.info} Set \`APPIUM_HOME\` to ${appiumHome}`);
                }
                // find go_ios from npm
                if (!!enableGoIos)
                    env.GO_IOS = yield goIosPath();
                return env;
            });
            /**
             *
             * @param {AppiumEnv} env
             */
            const installDriver = (env) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const APPIUM_BIN = getAppiumBin();
                console.log(`${log_symbols_1.info} Checking if driver "${driverName}" is installed...`);
                const driverListArgs = [APPIUM_BIN, 'driver', 'list', '--json'];
                console.log(`${log_symbols_1.info} Running: ${process.execPath} ${driverListArgs.join(' ')}`);
                const { stdout: driverListJson } = yield (0, teen_process_1.exec)(process.execPath, driverListArgs, {
                    env,
                });
                const installedDrivers = JSON.parse(driverListJson);
                if (!((_a = installedDrivers[driverName]) === null || _a === void 0 ? void 0 : _a.installed)) {
                    console.log(`${log_symbols_1.warning} Driver "${driverName}" not installed; installing...`);
                    const driverArgs = [APPIUM_BIN, 'driver', 'install', '--source', driverSource, driverSpec];
                    if (driverPackage) {
                        driverArgs.push('--package', driverPackage);
                    }
                    console.log(`${log_symbols_1.info} Running: ${process.execPath} ${driverArgs.join(' ')}`);
                    yield (0, teen_process_1.exec)(process.execPath, driverArgs, {
                        env,
                    });
                }
                console.log(`${log_symbols_1.success} Installed driver "${driverName}"`);
            });
            function removePluginFromExtensionsYaml(env) {
                return __awaiter(this, void 0, void 0, function* () {
                    const extensionsYaml = path_1.default.join(env.APPIUM_HOME, 'node_modules', '.cache', 'appium', 'extensions.yaml');
                    console.log(`${log_symbols_1.info} Removing plugin "${pluginName}" from ${extensionsYaml}`);
                    const extensions = js_yaml_1.default.load(fs_1.default.readFileSync(extensionsYaml, 'utf8'));
                    delete extensions.plugins[pluginName];
                    console.log(`${log_symbols_1.info} Writing back to ${extensionsYaml}`);
                    fs_1.default.writeFileSync(extensionsYaml, js_yaml_1.default.dump(extensions));
                });
            }
            /**
             *
             * @param {AppiumEnv} env
             */
            const installPlugin = (env) => __awaiter(this, void 0, void 0, function* () {
                /*const availablePlugins = await installedPluginsByAppiumCommands(env);
                      console.log(`${info} Available plugins: ${JSON.stringify(Object.keys(availablePlugins), null, 2)}`);
                      const installedPlugins = Object.keys(availablePlugins).map((item) => availablePlugins[item]).filter((p: any) => p.installed);
                      console.log(`${info} Installed plugin: ${JSON.stringify(installedPlugins, null, 2)}`);
                      */
                // same plugin maybe installed via different source: npm or local
                // we don't care, just remove it and write it back to the file
                yield removePluginFromExtensionsYaml(env);
                // installing our version of plugin
                const pluginArgs = [
                    getAppiumBin(),
                    'plugin',
                    'install',
                    '--source',
                    pluginSource,
                    pluginSpec,
                ];
                // only aplicable for npm
                if (pluginPackage) {
                    pluginArgs.push('--package', pluginPackage);
                }
                console.log(`${log_symbols_1.info} Installing plugin: ${process.execPath} ${pluginArgs.join(' ')}`);
                yield (0, teen_process_1.exec)(process.execPath, pluginArgs, { env });
                console.log(`${log_symbols_1.success} Installed plugin "${pluginName}"`);
            });
            const createServer = () => __awaiter(this, void 0, void 0, function* () {
                if (!port) {
                    port = yield (0, get_port_1.default)();
                }
                console.log(`${log_symbols_1.info} Will use port ${port} for Appium server`);
                // here we are using CLI (instead of AppiumServer) to prevent schema conflicts
                yield runAppiumServerFromCli(env, [pluginName], [driverName], configFile);
                // use axios to wait until port is returning 200 OK
                console.log(`${log_symbols_1.info} Waiting for Appium server to be ready...`);
            });
            function runAppiumServerFromCli(env, usePlugins = [], useDrivers = [], configFile = '') {
                return __awaiter(this, void 0, void 0, function* () {
                    /**
                           example:
                           appium server -ka 800 \
                              --use-plugins=device-farm,appium-dashboard  \
                              --relaxed-security \
                              --allow-insecure chromedriver_autodownload,execute_driver_script,adb_shell \
                              --config ./hub-config.json \
                              -pa /wd/hub
                           */
                    const APPIUM_BIN = getAppiumBin();
                    const serverArgs = [APPIUM_BIN, 'server', '-ka', '800'];
                    if (usePlugins.length > 0) {
                        serverArgs.push(`--use-plugins=${usePlugins.join(',')}`);
                    }
                    if (useDrivers.length > 0) {
                        serverArgs.push(`--use-drivers=${useDrivers.join(',')}`);
                    }
                    if (configFile) {
                        serverArgs.push(`--config=${configFile}`);
                    }
                    console.log(`APPIUM_HOME=${env.APPIUM_HOME} GO_IOS=${env.GO_IOS}`);
                    console.log(`${log_symbols_1.info} Running: ${process.execPath} ${serverArgs.join(' ')}`);
                    (0, teen_process_1.exec)(process.execPath, serverArgs, {
                        env,
                    });
                    return waitServer(host !== null && host !== void 0 ? host : ip_1.default.address(), port !== null && port !== void 0 ? port : 4723, 60);
                });
            }
            // Use axios to hit appium endpoint until it returns 200 OK
            function waitServer(host, port, timeoutSeconds) {
                return __awaiter(this, void 0, void 0, function* () {
                    const axios = require('axios');
                    // const basePath = serverArgs.basePath || '';
                    const url = `http://${host}:${port}/status`;
                    const timeout = timeoutSeconds * 1000;
                    const start = Date.now();
                    while (Date.now() - start < timeout) {
                        try {
                            yield axios.get(url);
                            return;
                        }
                        catch (ign) {
                            // ignore
                            console.log(`${log_symbols_1.info} url: ${url} error: ${ign.message}`);
                        }
                        yield new Promise((resolve) => setTimeout(resolve, 1000));
                    }
                    throw new Error(`Appium server did not start after ${timeoutSeconds} seconds`);
                });
            }
            const env = yield setupAppiumHome();
            yield installDriver(env);
            yield installPlugin(env);
            yield createServer();
        });
    }
    function stopPlugin() {
        return __awaiter(this, void 0, void 0, function* () {
            if (server) {
                yield server.close();
            }
        });
    }
    // clean it after test
    after(stopPlugin);
    // have an option to start the plugin before the test manually
    // this is useful to start multiple plugins in a single test
    if (before) {
        console.log("Adding plugin startup into mocha's before hook");
        before(startPlugin);
    }
    else {
        console.log(`Please start plugin ${pluginName} manually using "startPlugin()" function`);
    }
    return {
        startPlugin,
        stopPlugin,
    };
}
exports.pluginE2EHarness = pluginE2EHarness;
