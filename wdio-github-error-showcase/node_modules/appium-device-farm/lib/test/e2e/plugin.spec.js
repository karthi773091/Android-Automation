"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/no-var-requires
const NodeDevices_1 = __importDefault(require("../../src/device-managers/NodeDevices"));
// eslint-disable-next-line @typescript-eslint/no-var-requires
const chai = require('chai'), 
// eslint-disable-next-line no-unused-vars
should = chai.should();
const chai_1 = require("chai");
const axios_1 = __importDefault(require("axios"));
const e2ehelper_1 = require("./e2ehelper");
const plugin_test_support_1 = require("@appium/plugin-test-support");
const ip_1 = __importDefault(require("ip"));
const db_1 = require("../../src/data-service/db");
describe('Basic Plugin Test', () => {
    // dump hub config into a file
    const hub_config_file = (0, e2ehelper_1.ensureHubConfig)('none');
    // dump node config into a file
    const node_config_file = (0, e2ehelper_1.ensureNodeConfig)();
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)();
    // run hub
    (0, plugin_test_support_1.pluginE2EHarness)({
        before: global.before,
        after: global.after,
        serverArgs: {
            subcommand: 'server',
            configFile: hub_config_file,
        },
        pluginName: 'device-farm',
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    const hub_url = `http://${ip_1.default.address()}:${e2ehelper_1.HUB_APPIUM_PORT}`;
    it('Basic Plugin test', () => __awaiter(void 0, void 0, void 0, function* () {
        (yield axios_1.default.get(`${hub_url}/device-farm`)).status.should.eql(200);
    }));
    it('Basic Plugin API test', () => __awaiter(void 0, void 0, void 0, function* () {
        (yield axios_1.default.get(`${hub_url}/device-farm/api/device`)).status.should.eql(200);
    }));
    it('Add Android devices from node to hub', () => __awaiter(void 0, void 0, void 0, function* () {
        (yield db_1.ATDRepository.DeviceModel).removeDataOnly();
        const nodeAndroidDevice = [
            {
                adbRemoteHost: null,
                adbPort: 5039,
                systemPort: 58296,
                sdk: '13',
                realDevice: false,
                name: 'sdk_gphone64_arm64',
                busy: false,
                state: 'device',
                udid: 'emulator-5551',
                platform: 'android',
                deviceType: 'emulator',
                host: 'http://127.2.1.41:4723',
                totalUtilizationTimeMilliSec: 7023014,
                sessionStartTime: 0,
            },
        ];
        const nodeDevices = new NodeDevices_1.default(hub_url);
        yield nodeDevices.postDevicesToHub(nodeAndroidDevice, 'add');
        const devices = (yield axios_1.default.get(`${hub_url}/device-farm/api/device`)).data;
        devices.find((d) => d.udid === 'emulator-5551').should.to.be.an('object');
        nodeAndroidDevice[0].udid = 'emulator-5552';
        yield nodeDevices.postDevicesToHub(nodeAndroidDevice, 'add');
        const updatedDeviceList = (yield axios_1.default.get(`${hub_url}/device-farm/api/device`)).data;
        //updatedDeviceList.should.have.lengthOf(2);
        updatedDeviceList.find((d) => d.udid === 'emulator-5552').should.to.be.an('object');
    }));
    it('Remove Android devices from node to hub', () => __awaiter(void 0, void 0, void 0, function* () {
        const nodeDevices = new NodeDevices_1.default(hub_url);
        const devices = (yield axios_1.default.get(`${hub_url}/device-farm/api/device`)).data;
        const exptectedDevice = devices.find((d) => d.udid === 'emulator-5551');
        devices.find((d) => d.udid === 'emulator-5551').should.to.be.an('object');
        console.log('devices', exptectedDevice);
        yield nodeDevices.postDevicesToHub([{ udid: 'emulator-5551', host: '127.2.1.41' }], 'remove');
        const updatedDeviceList = (yield axios_1.default.get(`${hub_url}/device-farm/api/device`)).data;
        const find = updatedDeviceList.find((d) => d.udid === 'emulator-5551');
        (0, chai_1.expect)(find).to.be.undefined;
    }));
});
