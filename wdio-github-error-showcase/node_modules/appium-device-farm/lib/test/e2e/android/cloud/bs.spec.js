"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_test_support_1 = require("@appium/plugin-test-support");
const path_1 = __importDefault(require("path"));
const webdriverio_1 = require("webdriverio");
const e2ehelper_1 = require("../../e2ehelper");
const ip_1 = __importDefault(require("ip"));
require("dotenv/config");
const axios_1 = __importDefault(require("axios"));
const chai_1 = require("chai");
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const chai = __importStar(require("chai"));
chai.use(chai_as_promised_1.default);
const APPIUM_HOST = ip_1.default.address();
const APPIUM_PORT = 4723;
const WDIO_PARAMS = {
    connectionRetryCount: 0,
    hostname: APPIUM_HOST,
    port: APPIUM_PORT,
    logLevel: 'info',
};
const capabilities = {
    platformName: 'android',
    'appium:app': (_a = process.env.BS_ANDROID_CLOUD_APP) !== null && _a !== void 0 ? _a : 'bs://3c67a275efebca08ac1ee900fc35d979f846f12a',
    'bstack:options': {
        projectName: 'Login',
        buildName: '1.1',
        sessionName: 'LoginTest',
    },
};
let driver;
describe('BrowserStack: Plugin Test', () => {
    // dump hub config into a file
    const hub_config_file = path_1.default.join(__dirname, '../../../../serverConfig/bs-config.json');
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)();
    // run hub
    (0, plugin_test_support_1.pluginE2EHarness)({
        before: global.before,
        after: global.after,
        serverArgs: {
            subcommand: 'server',
            configFile: hub_config_file,
        },
        pluginName: 'device-farm',
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
    }));
    it('Vertical swipe test', () => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`Device UDID: ${yield driver.capabilities.deviceUDID}`);
        const currentBusyDevices = yield busyDevices();
        console.log(`currentBusyDevices: ${JSON.stringify(currentBusyDevices)}`);
        // the same number of devices should be busy
        (0, chai_1.expect)(currentBusyDevices.length).to.equal(1);
        yield driver.performActions([
            {
                type: 'pointer',
                id: 'finger1',
                parameters: { pointerType: 'touch' },
                actions: [
                    { type: 'pointerMove', duration: 0, x: 100, y: 100 },
                    { type: 'pointerDown', button: 0 },
                    { type: 'pause', duration: 500 },
                    { type: 'pointerMove', duration: 1000, origin: 'pointer', x: -50, y: 0 },
                    { type: 'pointerUp', button: 0 },
                ],
            },
        ]);
        console.log('Successfully swiped');
    }));
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        if (driver) {
            try {
                yield driver.deleteSession();
            }
            catch (ign) {
                console.log(ign);
            }
            driver = null;
        }
    }));
});
function busyDevices() {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield axios_1.default.get(`http://${APPIUM_HOST}:${e2ehelper_1.HUB_APPIUM_PORT}/device-farm/api/device`);
        return res.data.filter((device) => device.busy === true);
    });
}
describe('Browser Stack: Quirks', () => {
    // dump hub config into a file
    const hub_config_file = path_1.default.join(__dirname, '../../../../serverConfig/bs-config.json');
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)();
    // run hub
    (0, plugin_test_support_1.pluginE2EHarness)({
        before: global.before,
        after: global.after,
        serverArgs: {
            subcommand: 'server',
            configFile: hub_config_file,
        },
        pluginName: 'device-farm',
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    it('handles empty session id when app is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
        capabilities['appium:app'] = 'bs://invalid-app-id';
        const initialBusyDevices = yield busyDevices();
        console.log(`initialBusyDevices: ${JSON.stringify(initialBusyDevices)}`);
        try {
            yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
        }
        catch (e) {
            console.log(e);
        }
        const currentBusyDevices = yield busyDevices();
        console.log(`currentBusyDevices: ${JSON.stringify(currentBusyDevices)}`);
        // the same number of devices should be busy
        (0, chai_1.expect)(currentBusyDevices.length).to.equal(initialBusyDevices.length);
        // no cloud devices should be allocated
        const cloudDevices = currentBusyDevices.filter((device) => device.cloud === 'browserstack');
        (0, chai_1.expect)(cloudDevices.length).to.equal(0);
    }));
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
        if (driver) {
            try {
                yield driver.deleteSession();
            }
            catch (ign) {
                console.log(ign);
            }
            driver = null;
        }
    }));
});
