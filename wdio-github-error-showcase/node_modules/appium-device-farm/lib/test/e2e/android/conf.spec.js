"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const webdriverio_1 = require("webdriverio");
const APPIUM_HOST = '127.0.0.1';
const APPIUM_PORT = 31337;
const WDIO_PARAMS = {
    connectionRetryCount: 0,
    hostname: APPIUM_HOST,
    port: APPIUM_PORT,
    path: '/wd/hub/',
    logLevel: 'info',
};
const capabilities = {
    platformName: 'Android',
    'appium:uiautomator2ServerInstallTimeout': '50000',
    'appium:automationName': 'UIAutomator2',
    'df:options': {
        recordVideo: true,
        screenshotOnFailure: true,
        build: new Date().toISOString(),
        saveDeviceLogs: true,
        tags: ['team1', 'team22'],
    },
    'appium:app': 'https://github.com/AppiumTestDistribution/appium-demo/blob/main/VodQA.apk?raw=true',
};
let driver;
describe('Plugin Test', () => {
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
    }));
    it('Vertical swipe test', () => __awaiter(void 0, void 0, void 0, function* () {
        yield driver.executeScript('devicefarm: setSessionName', [{ name: 'SliderTest Example' }]);
        yield driver.pause(3000);
        yield driver.performActions([
            {
                type: 'pointer',
                id: 'finger1',
                parameters: { pointerType: 'touch' },
                actions: [
                    { type: 'pointerMove', duration: 0, x: 100, y: 100 },
                    { type: 'pointerDown', button: 0 },
                    { type: 'pause', duration: 500 },
                    { type: 'pointerMove', duration: 1000, origin: 'pointer', x: -50, y: 0 },
                    { type: 'pointerUp', button: 0 },
                ],
            },
        ]);
        yield driver.$('~login').click();
        yield driver.$('~slider1').click();
    }));
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (driver) {
                yield driver.executeScript('devicefarm: setSessionStatus', [
                    {
                        status: this.currentTest.state, //passed or failed
                    },
                ]);
                yield driver.deleteSession();
                driver = null;
            }
        });
    });
});
