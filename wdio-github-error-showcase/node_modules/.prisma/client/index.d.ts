
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Build
 * 
 */
export type Build = $Result.DefaultSelection<Prisma.$BuildPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model SessionLog
 * 
 */
export type SessionLog = $Result.DefaultSelection<Prisma.$SessionLogPayload>
/**
 * Model TestEventJournal
 * 
 */
export type TestEventJournal = $Result.DefaultSelection<Prisma.$TestEventJournalPayload>
/**
 * Model AppInformation
 * 
 */
export type AppInformation = $Result.DefaultSelection<Prisma.$AppInformationPayload>
/**
 * Model DeviceTags
 * 
 */
export type DeviceTags = $Result.DefaultSelection<Prisma.$DeviceTagsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Builds
 * const builds = await prisma.build.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Builds
   * const builds = await prisma.build.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.build`: Exposes CRUD operations for the **Build** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Builds
    * const builds = await prisma.build.findMany()
    * ```
    */
  get build(): Prisma.BuildDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.sessionLog`: Exposes CRUD operations for the **SessionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionLogs
    * const sessionLogs = await prisma.sessionLog.findMany()
    * ```
    */
  get sessionLog(): Prisma.SessionLogDelegate<ExtArgs>;

  /**
   * `prisma.testEventJournal`: Exposes CRUD operations for the **TestEventJournal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestEventJournals
    * const testEventJournals = await prisma.testEventJournal.findMany()
    * ```
    */
  get testEventJournal(): Prisma.TestEventJournalDelegate<ExtArgs>;

  /**
   * `prisma.appInformation`: Exposes CRUD operations for the **AppInformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppInformations
    * const appInformations = await prisma.appInformation.findMany()
    * ```
    */
  get appInformation(): Prisma.AppInformationDelegate<ExtArgs>;

  /**
   * `prisma.deviceTags`: Exposes CRUD operations for the **DeviceTags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceTags
    * const deviceTags = await prisma.deviceTags.findMany()
    * ```
    */
  get deviceTags(): Prisma.DeviceTagsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Build: 'Build',
    Session: 'Session',
    SessionLog: 'SessionLog',
    TestEventJournal: 'TestEventJournal',
    AppInformation: 'AppInformation',
    DeviceTags: 'DeviceTags'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "build" | "session" | "sessionLog" | "testEventJournal" | "appInformation" | "deviceTags"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Build: {
        payload: Prisma.$BuildPayload<ExtArgs>
        fields: Prisma.BuildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          findFirst: {
            args: Prisma.BuildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          findMany: {
            args: Prisma.BuildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>[]
          }
          create: {
            args: Prisma.BuildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          createMany: {
            args: Prisma.BuildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>[]
          }
          delete: {
            args: Prisma.BuildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          update: {
            args: Prisma.BuildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          deleteMany: {
            args: Prisma.BuildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          aggregate: {
            args: Prisma.BuildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuild>
          }
          groupBy: {
            args: Prisma.BuildGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildCountArgs<ExtArgs>
            result: $Utils.Optional<BuildCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      SessionLog: {
        payload: Prisma.$SessionLogPayload<ExtArgs>
        fields: Prisma.SessionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          findFirst: {
            args: Prisma.SessionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          findMany: {
            args: Prisma.SessionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>[]
          }
          create: {
            args: Prisma.SessionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          createMany: {
            args: Prisma.SessionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>[]
          }
          delete: {
            args: Prisma.SessionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          update: {
            args: Prisma.SessionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          deleteMany: {
            args: Prisma.SessionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionLogPayload>
          }
          aggregate: {
            args: Prisma.SessionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionLog>
          }
          groupBy: {
            args: Prisma.SessionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionLogCountArgs<ExtArgs>
            result: $Utils.Optional<SessionLogCountAggregateOutputType> | number
          }
        }
      }
      TestEventJournal: {
        payload: Prisma.$TestEventJournalPayload<ExtArgs>
        fields: Prisma.TestEventJournalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestEventJournalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestEventJournalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          findFirst: {
            args: Prisma.TestEventJournalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestEventJournalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          findMany: {
            args: Prisma.TestEventJournalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>[]
          }
          create: {
            args: Prisma.TestEventJournalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          createMany: {
            args: Prisma.TestEventJournalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestEventJournalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>[]
          }
          delete: {
            args: Prisma.TestEventJournalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          update: {
            args: Prisma.TestEventJournalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          deleteMany: {
            args: Prisma.TestEventJournalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestEventJournalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestEventJournalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestEventJournalPayload>
          }
          aggregate: {
            args: Prisma.TestEventJournalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestEventJournal>
          }
          groupBy: {
            args: Prisma.TestEventJournalGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestEventJournalGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestEventJournalCountArgs<ExtArgs>
            result: $Utils.Optional<TestEventJournalCountAggregateOutputType> | number
          }
        }
      }
      AppInformation: {
        payload: Prisma.$AppInformationPayload<ExtArgs>
        fields: Prisma.AppInformationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppInformationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppInformationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          findFirst: {
            args: Prisma.AppInformationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppInformationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          findMany: {
            args: Prisma.AppInformationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>[]
          }
          create: {
            args: Prisma.AppInformationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          createMany: {
            args: Prisma.AppInformationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppInformationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>[]
          }
          delete: {
            args: Prisma.AppInformationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          update: {
            args: Prisma.AppInformationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          deleteMany: {
            args: Prisma.AppInformationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppInformationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppInformationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppInformationPayload>
          }
          aggregate: {
            args: Prisma.AppInformationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppInformation>
          }
          groupBy: {
            args: Prisma.AppInformationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppInformationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppInformationCountArgs<ExtArgs>
            result: $Utils.Optional<AppInformationCountAggregateOutputType> | number
          }
        }
      }
      DeviceTags: {
        payload: Prisma.$DeviceTagsPayload<ExtArgs>
        fields: Prisma.DeviceTagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceTagsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceTagsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          findFirst: {
            args: Prisma.DeviceTagsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceTagsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          findMany: {
            args: Prisma.DeviceTagsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>[]
          }
          create: {
            args: Prisma.DeviceTagsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          createMany: {
            args: Prisma.DeviceTagsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceTagsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>[]
          }
          delete: {
            args: Prisma.DeviceTagsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          update: {
            args: Prisma.DeviceTagsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          deleteMany: {
            args: Prisma.DeviceTagsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceTagsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DeviceTagsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceTagsPayload>
          }
          aggregate: {
            args: Prisma.DeviceTagsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceTags>
          }
          groupBy: {
            args: Prisma.DeviceTagsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceTagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceTagsCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceTagsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BuildCountOutputType
   */

  export type BuildCountOutputType = {
    sessions: number
  }

  export type BuildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | BuildCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * BuildCountOutputType without action
   */
  export type BuildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildCountOutputType
     */
    select?: BuildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildCountOutputType without action
   */
  export type BuildCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    sessionLogs: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessionLogs?: boolean | SessionCountOutputTypeCountSessionLogsArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountSessionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Build
   */

  export type AggregateBuild = {
    _count: BuildCountAggregateOutputType | null
    _min: BuildMinAggregateOutputType | null
    _max: BuildMaxAggregateOutputType | null
  }

  export type BuildMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuildMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuildCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuildMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuildMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuildCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Build to aggregate.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Builds
    **/
    _count?: true | BuildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildMaxAggregateInputType
  }

  export type GetBuildAggregateType<T extends BuildAggregateArgs> = {
        [P in keyof T & keyof AggregateBuild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuild[P]>
      : GetScalarType<T[P], AggregateBuild[P]>
  }




  export type BuildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildWhereInput
    orderBy?: BuildOrderByWithAggregationInput | BuildOrderByWithAggregationInput[]
    by: BuildScalarFieldEnum[] | BuildScalarFieldEnum
    having?: BuildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildCountAggregateInputType | true
    _min?: BuildMinAggregateInputType
    _max?: BuildMaxAggregateInputType
  }

  export type BuildGroupByOutputType = {
    id: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: BuildCountAggregateOutputType | null
    _min: BuildMinAggregateOutputType | null
    _max: BuildMaxAggregateOutputType | null
  }

  type GetBuildGroupByPayload<T extends BuildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildGroupByOutputType[P]>
            : GetScalarType<T[P], BuildGroupByOutputType[P]>
        }
      >
    >


  export type BuildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | Build$sessionsArgs<ExtArgs>
    _count?: boolean | BuildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["build"]>

  export type BuildSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["build"]>

  export type BuildSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | Build$sessionsArgs<ExtArgs>
    _count?: boolean | BuildCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BuildIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BuildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Build"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["build"]>
    composites: {}
  }

  type BuildGetPayload<S extends boolean | null | undefined | BuildDefaultArgs> = $Result.GetResult<Prisma.$BuildPayload, S>

  type BuildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuildFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuildCountAggregateInputType | true
    }

  export interface BuildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Build'], meta: { name: 'Build' } }
    /**
     * Find zero or one Build that matches the filter.
     * @param {BuildFindUniqueArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildFindUniqueArgs>(args: SelectSubset<T, BuildFindUniqueArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Build that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BuildFindUniqueOrThrowArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Build that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindFirstArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildFindFirstArgs>(args?: SelectSubset<T, BuildFindFirstArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Build that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindFirstOrThrowArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Builds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Builds
     * const builds = await prisma.build.findMany()
     * 
     * // Get first 10 Builds
     * const builds = await prisma.build.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildWithIdOnly = await prisma.build.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildFindManyArgs>(args?: SelectSubset<T, BuildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Build.
     * @param {BuildCreateArgs} args - Arguments to create a Build.
     * @example
     * // Create one Build
     * const Build = await prisma.build.create({
     *   data: {
     *     // ... data to create a Build
     *   }
     * })
     * 
     */
    create<T extends BuildCreateArgs>(args: SelectSubset<T, BuildCreateArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Builds.
     * @param {BuildCreateManyArgs} args - Arguments to create many Builds.
     * @example
     * // Create many Builds
     * const build = await prisma.build.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildCreateManyArgs>(args?: SelectSubset<T, BuildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Builds and returns the data saved in the database.
     * @param {BuildCreateManyAndReturnArgs} args - Arguments to create many Builds.
     * @example
     * // Create many Builds
     * const build = await prisma.build.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Builds and only return the `id`
     * const buildWithIdOnly = await prisma.build.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Build.
     * @param {BuildDeleteArgs} args - Arguments to delete one Build.
     * @example
     * // Delete one Build
     * const Build = await prisma.build.delete({
     *   where: {
     *     // ... filter to delete one Build
     *   }
     * })
     * 
     */
    delete<T extends BuildDeleteArgs>(args: SelectSubset<T, BuildDeleteArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Build.
     * @param {BuildUpdateArgs} args - Arguments to update one Build.
     * @example
     * // Update one Build
     * const build = await prisma.build.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildUpdateArgs>(args: SelectSubset<T, BuildUpdateArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Builds.
     * @param {BuildDeleteManyArgs} args - Arguments to filter Builds to delete.
     * @example
     * // Delete a few Builds
     * const { count } = await prisma.build.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildDeleteManyArgs>(args?: SelectSubset<T, BuildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Builds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Builds
     * const build = await prisma.build.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildUpdateManyArgs>(args: SelectSubset<T, BuildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Build.
     * @param {BuildUpsertArgs} args - Arguments to update or create a Build.
     * @example
     * // Update or create a Build
     * const build = await prisma.build.upsert({
     *   create: {
     *     // ... data to create a Build
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Build we want to update
     *   }
     * })
     */
    upsert<T extends BuildUpsertArgs>(args: SelectSubset<T, BuildUpsertArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Builds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildCountArgs} args - Arguments to filter Builds to count.
     * @example
     * // Count the number of Builds
     * const count = await prisma.build.count({
     *   where: {
     *     // ... the filter for the Builds we want to count
     *   }
     * })
    **/
    count<T extends BuildCountArgs>(
      args?: Subset<T, BuildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Build.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildAggregateArgs>(args: Subset<T, BuildAggregateArgs>): Prisma.PrismaPromise<GetBuildAggregateType<T>>

    /**
     * Group by Build.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildGroupByArgs['orderBy'] }
        : { orderBy?: BuildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Build model
   */
  readonly fields: BuildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Build.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends Build$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Build$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Build model
   */ 
  interface BuildFieldRefs {
    readonly id: FieldRef<"Build", 'String'>
    readonly name: FieldRef<"Build", 'String'>
    readonly createdAt: FieldRef<"Build", 'DateTime'>
    readonly updatedAt: FieldRef<"Build", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Build findUnique
   */
  export type BuildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build findUniqueOrThrow
   */
  export type BuildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build findFirst
   */
  export type BuildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builds.
     */
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build findFirstOrThrow
   */
  export type BuildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builds.
     */
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build findMany
   */
  export type BuildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Builds to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build create
   */
  export type BuildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The data needed to create a Build.
     */
    data: XOR<BuildCreateInput, BuildUncheckedCreateInput>
  }

  /**
   * Build createMany
   */
  export type BuildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Builds.
     */
    data: BuildCreateManyInput | BuildCreateManyInput[]
  }

  /**
   * Build createManyAndReturn
   */
  export type BuildCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Builds.
     */
    data: BuildCreateManyInput | BuildCreateManyInput[]
  }

  /**
   * Build update
   */
  export type BuildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The data needed to update a Build.
     */
    data: XOR<BuildUpdateInput, BuildUncheckedUpdateInput>
    /**
     * Choose, which Build to update.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build updateMany
   */
  export type BuildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Builds.
     */
    data: XOR<BuildUpdateManyMutationInput, BuildUncheckedUpdateManyInput>
    /**
     * Filter which Builds to update
     */
    where?: BuildWhereInput
  }

  /**
   * Build upsert
   */
  export type BuildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The filter to search for the Build to update in case it exists.
     */
    where: BuildWhereUniqueInput
    /**
     * In case the Build found by the `where` argument doesn't exist, create a new Build with this data.
     */
    create: XOR<BuildCreateInput, BuildUncheckedCreateInput>
    /**
     * In case the Build was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildUpdateInput, BuildUncheckedUpdateInput>
  }

  /**
   * Build delete
   */
  export type BuildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter which Build to delete.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build deleteMany
   */
  export type BuildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Builds to delete
     */
    where?: BuildWhereInput
  }

  /**
   * Build.sessions
   */
  export type Build$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Build without action
   */
  export type BuildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    buildId: string | null
    name: string | null
    status: string | null
    desiredCapabilities: string | null
    sessionCapabilities: string | null
    nodeId: string | null
    hasLiveVideo: boolean | null
    videoRecording: string | null
    deviceLogs: string | null
    appProfiling: string | null
    startTime: Date | null
    endTime: Date | null
    failureReason: string | null
    deviceUdid: string | null
    devicePlatform: string | null
    deviceVersion: string | null
    deviceName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    buildId: string | null
    name: string | null
    status: string | null
    desiredCapabilities: string | null
    sessionCapabilities: string | null
    nodeId: string | null
    hasLiveVideo: boolean | null
    videoRecording: string | null
    deviceLogs: string | null
    appProfiling: string | null
    startTime: Date | null
    endTime: Date | null
    failureReason: string | null
    deviceUdid: string | null
    devicePlatform: string | null
    deviceVersion: string | null
    deviceName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    buildId: number
    name: number
    status: number
    desiredCapabilities: number
    sessionCapabilities: number
    nodeId: number
    hasLiveVideo: number
    videoRecording: number
    deviceLogs: number
    appProfiling: number
    startTime: number
    endTime: number
    failureReason: number
    deviceUdid: number
    devicePlatform: number
    deviceVersion: number
    deviceName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    buildId?: true
    name?: true
    status?: true
    desiredCapabilities?: true
    sessionCapabilities?: true
    nodeId?: true
    hasLiveVideo?: true
    videoRecording?: true
    deviceLogs?: true
    appProfiling?: true
    startTime?: true
    endTime?: true
    failureReason?: true
    deviceUdid?: true
    devicePlatform?: true
    deviceVersion?: true
    deviceName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    buildId?: true
    name?: true
    status?: true
    desiredCapabilities?: true
    sessionCapabilities?: true
    nodeId?: true
    hasLiveVideo?: true
    videoRecording?: true
    deviceLogs?: true
    appProfiling?: true
    startTime?: true
    endTime?: true
    failureReason?: true
    deviceUdid?: true
    devicePlatform?: true
    deviceVersion?: true
    deviceName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    buildId?: true
    name?: true
    status?: true
    desiredCapabilities?: true
    sessionCapabilities?: true
    nodeId?: true
    hasLiveVideo?: true
    videoRecording?: true
    deviceLogs?: true
    appProfiling?: true
    startTime?: true
    endTime?: true
    failureReason?: true
    deviceUdid?: true
    devicePlatform?: true
    deviceVersion?: true
    deviceName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    buildId: string | null
    name: string | null
    status: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording: string | null
    deviceLogs: string | null
    appProfiling: string | null
    startTime: Date
    endTime: Date | null
    failureReason: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName: string | null
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildId?: boolean
    name?: boolean
    status?: boolean
    desiredCapabilities?: boolean
    sessionCapabilities?: boolean
    nodeId?: boolean
    hasLiveVideo?: boolean
    videoRecording?: boolean
    deviceLogs?: boolean
    appProfiling?: boolean
    startTime?: boolean
    endTime?: boolean
    failureReason?: boolean
    deviceUdid?: boolean
    devicePlatform?: boolean
    deviceVersion?: boolean
    deviceName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    build?: boolean | Session$buildArgs<ExtArgs>
    sessionLogs?: boolean | Session$sessionLogsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildId?: boolean
    name?: boolean
    status?: boolean
    desiredCapabilities?: boolean
    sessionCapabilities?: boolean
    nodeId?: boolean
    hasLiveVideo?: boolean
    videoRecording?: boolean
    deviceLogs?: boolean
    appProfiling?: boolean
    startTime?: boolean
    endTime?: boolean
    failureReason?: boolean
    deviceUdid?: boolean
    devicePlatform?: boolean
    deviceVersion?: boolean
    deviceName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    build?: boolean | Session$buildArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    buildId?: boolean
    name?: boolean
    status?: boolean
    desiredCapabilities?: boolean
    sessionCapabilities?: boolean
    nodeId?: boolean
    hasLiveVideo?: boolean
    videoRecording?: boolean
    deviceLogs?: boolean
    appProfiling?: boolean
    startTime?: boolean
    endTime?: boolean
    failureReason?: boolean
    deviceUdid?: boolean
    devicePlatform?: boolean
    deviceVersion?: boolean
    deviceName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    build?: boolean | Session$buildArgs<ExtArgs>
    sessionLogs?: boolean | Session$sessionLogsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    build?: boolean | Session$buildArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      build: Prisma.$BuildPayload<ExtArgs> | null
      sessionLogs: Prisma.$SessionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildId: string | null
      name: string | null
      status: string
      desiredCapabilities: string
      sessionCapabilities: string
      nodeId: string
      hasLiveVideo: boolean
      videoRecording: string | null
      deviceLogs: string | null
      appProfiling: string | null
      startTime: Date
      endTime: Date | null
      failureReason: string | null
      deviceUdid: string
      devicePlatform: string
      deviceVersion: string
      deviceName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    build<T extends Session$buildArgs<ExtArgs> = {}>(args?: Subset<T, Session$buildArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sessionLogs<T extends Session$sessionLogsArgs<ExtArgs> = {}>(args?: Subset<T, Session$sessionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly buildId: FieldRef<"Session", 'String'>
    readonly name: FieldRef<"Session", 'String'>
    readonly status: FieldRef<"Session", 'String'>
    readonly desiredCapabilities: FieldRef<"Session", 'String'>
    readonly sessionCapabilities: FieldRef<"Session", 'String'>
    readonly nodeId: FieldRef<"Session", 'String'>
    readonly hasLiveVideo: FieldRef<"Session", 'Boolean'>
    readonly videoRecording: FieldRef<"Session", 'String'>
    readonly deviceLogs: FieldRef<"Session", 'String'>
    readonly appProfiling: FieldRef<"Session", 'String'>
    readonly startTime: FieldRef<"Session", 'DateTime'>
    readonly endTime: FieldRef<"Session", 'DateTime'>
    readonly failureReason: FieldRef<"Session", 'String'>
    readonly deviceUdid: FieldRef<"Session", 'String'>
    readonly devicePlatform: FieldRef<"Session", 'String'>
    readonly deviceVersion: FieldRef<"Session", 'String'>
    readonly deviceName: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session.build
   */
  export type Session$buildArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    where?: BuildWhereInput
  }

  /**
   * Session.sessionLogs
   */
  export type Session$sessionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    where?: SessionLogWhereInput
    orderBy?: SessionLogOrderByWithRelationInput | SessionLogOrderByWithRelationInput[]
    cursor?: SessionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionLogScalarFieldEnum | SessionLogScalarFieldEnum[]
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model SessionLog
   */

  export type AggregateSessionLog = {
    _count: SessionLogCountAggregateOutputType | null
    _min: SessionLogMinAggregateOutputType | null
    _max: SessionLogMaxAggregateOutputType | null
  }

  export type SessionLogMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    commandName: string | null
    url: string | null
    method: string | null
    title: string | null
    subtitle: string | null
    body: string | null
    response: string | null
    screenshot: string | null
    isSuccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    eventId: string | null
  }

  export type SessionLogMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    commandName: string | null
    url: string | null
    method: string | null
    title: string | null
    subtitle: string | null
    body: string | null
    response: string | null
    screenshot: string | null
    isSuccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    eventId: string | null
  }

  export type SessionLogCountAggregateOutputType = {
    id: number
    sessionId: number
    commandName: number
    url: number
    method: number
    title: number
    subtitle: number
    body: number
    response: number
    screenshot: number
    isSuccess: number
    createdAt: number
    updatedAt: number
    eventId: number
    _all: number
  }


  export type SessionLogMinAggregateInputType = {
    id?: true
    sessionId?: true
    commandName?: true
    url?: true
    method?: true
    title?: true
    subtitle?: true
    body?: true
    response?: true
    screenshot?: true
    isSuccess?: true
    createdAt?: true
    updatedAt?: true
    eventId?: true
  }

  export type SessionLogMaxAggregateInputType = {
    id?: true
    sessionId?: true
    commandName?: true
    url?: true
    method?: true
    title?: true
    subtitle?: true
    body?: true
    response?: true
    screenshot?: true
    isSuccess?: true
    createdAt?: true
    updatedAt?: true
    eventId?: true
  }

  export type SessionLogCountAggregateInputType = {
    id?: true
    sessionId?: true
    commandName?: true
    url?: true
    method?: true
    title?: true
    subtitle?: true
    body?: true
    response?: true
    screenshot?: true
    isSuccess?: true
    createdAt?: true
    updatedAt?: true
    eventId?: true
    _all?: true
  }

  export type SessionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionLog to aggregate.
     */
    where?: SessionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionLogs to fetch.
     */
    orderBy?: SessionLogOrderByWithRelationInput | SessionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionLogs
    **/
    _count?: true | SessionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionLogMaxAggregateInputType
  }

  export type GetSessionLogAggregateType<T extends SessionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionLog[P]>
      : GetScalarType<T[P], AggregateSessionLog[P]>
  }




  export type SessionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionLogWhereInput
    orderBy?: SessionLogOrderByWithAggregationInput | SessionLogOrderByWithAggregationInput[]
    by: SessionLogScalarFieldEnum[] | SessionLogScalarFieldEnum
    having?: SessionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionLogCountAggregateInputType | true
    _min?: SessionLogMinAggregateInputType
    _max?: SessionLogMaxAggregateInputType
  }

  export type SessionLogGroupByOutputType = {
    id: string
    sessionId: string
    commandName: string | null
    url: string
    method: string
    title: string
    subtitle: string | null
    body: string | null
    response: string
    screenshot: string | null
    isSuccess: boolean | null
    createdAt: Date
    updatedAt: Date
    eventId: string | null
    _count: SessionLogCountAggregateOutputType | null
    _min: SessionLogMinAggregateOutputType | null
    _max: SessionLogMaxAggregateOutputType | null
  }

  type GetSessionLogGroupByPayload<T extends SessionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionLogGroupByOutputType[P]>
            : GetScalarType<T[P], SessionLogGroupByOutputType[P]>
        }
      >
    >


  export type SessionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    commandName?: boolean
    url?: boolean
    method?: boolean
    title?: boolean
    subtitle?: boolean
    body?: boolean
    response?: boolean
    screenshot?: boolean
    isSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    eventId?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionLog"]>

  export type SessionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    commandName?: boolean
    url?: boolean
    method?: boolean
    title?: boolean
    subtitle?: boolean
    body?: boolean
    response?: boolean
    screenshot?: boolean
    isSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    eventId?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionLog"]>

  export type SessionLogSelectScalar = {
    id?: boolean
    sessionId?: boolean
    commandName?: boolean
    url?: boolean
    method?: boolean
    title?: boolean
    subtitle?: boolean
    body?: boolean
    response?: boolean
    screenshot?: boolean
    isSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    eventId?: boolean
  }

  export type SessionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }
  export type SessionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }

  export type $SessionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionLog"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      commandName: string | null
      url: string
      method: string
      title: string
      subtitle: string | null
      body: string | null
      response: string
      screenshot: string | null
      isSuccess: boolean | null
      createdAt: Date
      updatedAt: Date
      eventId: string | null
    }, ExtArgs["result"]["sessionLog"]>
    composites: {}
  }

  type SessionLogGetPayload<S extends boolean | null | undefined | SessionLogDefaultArgs> = $Result.GetResult<Prisma.$SessionLogPayload, S>

  type SessionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionLogCountAggregateInputType | true
    }

  export interface SessionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionLog'], meta: { name: 'SessionLog' } }
    /**
     * Find zero or one SessionLog that matches the filter.
     * @param {SessionLogFindUniqueArgs} args - Arguments to find a SessionLog
     * @example
     * // Get one SessionLog
     * const sessionLog = await prisma.sessionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionLogFindUniqueArgs>(args: SelectSubset<T, SessionLogFindUniqueArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SessionLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionLogFindUniqueOrThrowArgs} args - Arguments to find a SessionLog
     * @example
     * // Get one SessionLog
     * const sessionLog = await prisma.sessionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SessionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogFindFirstArgs} args - Arguments to find a SessionLog
     * @example
     * // Get one SessionLog
     * const sessionLog = await prisma.sessionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionLogFindFirstArgs>(args?: SelectSubset<T, SessionLogFindFirstArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SessionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogFindFirstOrThrowArgs} args - Arguments to find a SessionLog
     * @example
     * // Get one SessionLog
     * const sessionLog = await prisma.sessionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SessionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionLogs
     * const sessionLogs = await prisma.sessionLog.findMany()
     * 
     * // Get first 10 SessionLogs
     * const sessionLogs = await prisma.sessionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionLogWithIdOnly = await prisma.sessionLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionLogFindManyArgs>(args?: SelectSubset<T, SessionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SessionLog.
     * @param {SessionLogCreateArgs} args - Arguments to create a SessionLog.
     * @example
     * // Create one SessionLog
     * const SessionLog = await prisma.sessionLog.create({
     *   data: {
     *     // ... data to create a SessionLog
     *   }
     * })
     * 
     */
    create<T extends SessionLogCreateArgs>(args: SelectSubset<T, SessionLogCreateArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SessionLogs.
     * @param {SessionLogCreateManyArgs} args - Arguments to create many SessionLogs.
     * @example
     * // Create many SessionLogs
     * const sessionLog = await prisma.sessionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionLogCreateManyArgs>(args?: SelectSubset<T, SessionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionLogs and returns the data saved in the database.
     * @param {SessionLogCreateManyAndReturnArgs} args - Arguments to create many SessionLogs.
     * @example
     * // Create many SessionLogs
     * const sessionLog = await prisma.sessionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionLogs and only return the `id`
     * const sessionLogWithIdOnly = await prisma.sessionLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SessionLog.
     * @param {SessionLogDeleteArgs} args - Arguments to delete one SessionLog.
     * @example
     * // Delete one SessionLog
     * const SessionLog = await prisma.sessionLog.delete({
     *   where: {
     *     // ... filter to delete one SessionLog
     *   }
     * })
     * 
     */
    delete<T extends SessionLogDeleteArgs>(args: SelectSubset<T, SessionLogDeleteArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SessionLog.
     * @param {SessionLogUpdateArgs} args - Arguments to update one SessionLog.
     * @example
     * // Update one SessionLog
     * const sessionLog = await prisma.sessionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionLogUpdateArgs>(args: SelectSubset<T, SessionLogUpdateArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SessionLogs.
     * @param {SessionLogDeleteManyArgs} args - Arguments to filter SessionLogs to delete.
     * @example
     * // Delete a few SessionLogs
     * const { count } = await prisma.sessionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionLogDeleteManyArgs>(args?: SelectSubset<T, SessionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionLogs
     * const sessionLog = await prisma.sessionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionLogUpdateManyArgs>(args: SelectSubset<T, SessionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionLog.
     * @param {SessionLogUpsertArgs} args - Arguments to update or create a SessionLog.
     * @example
     * // Update or create a SessionLog
     * const sessionLog = await prisma.sessionLog.upsert({
     *   create: {
     *     // ... data to create a SessionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionLog we want to update
     *   }
     * })
     */
    upsert<T extends SessionLogUpsertArgs>(args: SelectSubset<T, SessionLogUpsertArgs<ExtArgs>>): Prisma__SessionLogClient<$Result.GetResult<Prisma.$SessionLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SessionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogCountArgs} args - Arguments to filter SessionLogs to count.
     * @example
     * // Count the number of SessionLogs
     * const count = await prisma.sessionLog.count({
     *   where: {
     *     // ... the filter for the SessionLogs we want to count
     *   }
     * })
    **/
    count<T extends SessionLogCountArgs>(
      args?: Subset<T, SessionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionLogAggregateArgs>(args: Subset<T, SessionLogAggregateArgs>): Prisma.PrismaPromise<GetSessionLogAggregateType<T>>

    /**
     * Group by SessionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionLogGroupByArgs['orderBy'] }
        : { orderBy?: SessionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionLog model
   */
  readonly fields: SessionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionLog model
   */ 
  interface SessionLogFieldRefs {
    readonly id: FieldRef<"SessionLog", 'String'>
    readonly sessionId: FieldRef<"SessionLog", 'String'>
    readonly commandName: FieldRef<"SessionLog", 'String'>
    readonly url: FieldRef<"SessionLog", 'String'>
    readonly method: FieldRef<"SessionLog", 'String'>
    readonly title: FieldRef<"SessionLog", 'String'>
    readonly subtitle: FieldRef<"SessionLog", 'String'>
    readonly body: FieldRef<"SessionLog", 'String'>
    readonly response: FieldRef<"SessionLog", 'String'>
    readonly screenshot: FieldRef<"SessionLog", 'String'>
    readonly isSuccess: FieldRef<"SessionLog", 'Boolean'>
    readonly createdAt: FieldRef<"SessionLog", 'DateTime'>
    readonly updatedAt: FieldRef<"SessionLog", 'DateTime'>
    readonly eventId: FieldRef<"SessionLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SessionLog findUnique
   */
  export type SessionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter, which SessionLog to fetch.
     */
    where: SessionLogWhereUniqueInput
  }

  /**
   * SessionLog findUniqueOrThrow
   */
  export type SessionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter, which SessionLog to fetch.
     */
    where: SessionLogWhereUniqueInput
  }

  /**
   * SessionLog findFirst
   */
  export type SessionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter, which SessionLog to fetch.
     */
    where?: SessionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionLogs to fetch.
     */
    orderBy?: SessionLogOrderByWithRelationInput | SessionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionLogs.
     */
    cursor?: SessionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionLogs.
     */
    distinct?: SessionLogScalarFieldEnum | SessionLogScalarFieldEnum[]
  }

  /**
   * SessionLog findFirstOrThrow
   */
  export type SessionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter, which SessionLog to fetch.
     */
    where?: SessionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionLogs to fetch.
     */
    orderBy?: SessionLogOrderByWithRelationInput | SessionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionLogs.
     */
    cursor?: SessionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionLogs.
     */
    distinct?: SessionLogScalarFieldEnum | SessionLogScalarFieldEnum[]
  }

  /**
   * SessionLog findMany
   */
  export type SessionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter, which SessionLogs to fetch.
     */
    where?: SessionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionLogs to fetch.
     */
    orderBy?: SessionLogOrderByWithRelationInput | SessionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionLogs.
     */
    cursor?: SessionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionLogs.
     */
    skip?: number
    distinct?: SessionLogScalarFieldEnum | SessionLogScalarFieldEnum[]
  }

  /**
   * SessionLog create
   */
  export type SessionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionLog.
     */
    data: XOR<SessionLogCreateInput, SessionLogUncheckedCreateInput>
  }

  /**
   * SessionLog createMany
   */
  export type SessionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionLogs.
     */
    data: SessionLogCreateManyInput | SessionLogCreateManyInput[]
  }

  /**
   * SessionLog createManyAndReturn
   */
  export type SessionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SessionLogs.
     */
    data: SessionLogCreateManyInput | SessionLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionLog update
   */
  export type SessionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionLog.
     */
    data: XOR<SessionLogUpdateInput, SessionLogUncheckedUpdateInput>
    /**
     * Choose, which SessionLog to update.
     */
    where: SessionLogWhereUniqueInput
  }

  /**
   * SessionLog updateMany
   */
  export type SessionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionLogs.
     */
    data: XOR<SessionLogUpdateManyMutationInput, SessionLogUncheckedUpdateManyInput>
    /**
     * Filter which SessionLogs to update
     */
    where?: SessionLogWhereInput
  }

  /**
   * SessionLog upsert
   */
  export type SessionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionLog to update in case it exists.
     */
    where: SessionLogWhereUniqueInput
    /**
     * In case the SessionLog found by the `where` argument doesn't exist, create a new SessionLog with this data.
     */
    create: XOR<SessionLogCreateInput, SessionLogUncheckedCreateInput>
    /**
     * In case the SessionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionLogUpdateInput, SessionLogUncheckedUpdateInput>
  }

  /**
   * SessionLog delete
   */
  export type SessionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
    /**
     * Filter which SessionLog to delete.
     */
    where: SessionLogWhereUniqueInput
  }

  /**
   * SessionLog deleteMany
   */
  export type SessionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionLogs to delete
     */
    where?: SessionLogWhereInput
  }

  /**
   * SessionLog without action
   */
  export type SessionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionLog
     */
    select?: SessionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionLogInclude<ExtArgs> | null
  }


  /**
   * Model TestEventJournal
   */

  export type AggregateTestEventJournal = {
    _count: TestEventJournalCountAggregateOutputType | null
    _min: TestEventJournalMinAggregateOutputType | null
    _max: TestEventJournalMaxAggregateOutputType | null
  }

  export type TestEventJournalMinAggregateOutputType = {
    id: string | null
    session_id: string | null
    event_uuid: string | null
    event_type: string | null
    event_sub_type: string | null
    name: string | null
    scopes: string | null
    result: string | null
    started_at: Date | null
    finished_at: Date | null
    start_event_doc: string | null
    finished_event_doc: string | null
    file: string | null
  }

  export type TestEventJournalMaxAggregateOutputType = {
    id: string | null
    session_id: string | null
    event_uuid: string | null
    event_type: string | null
    event_sub_type: string | null
    name: string | null
    scopes: string | null
    result: string | null
    started_at: Date | null
    finished_at: Date | null
    start_event_doc: string | null
    finished_event_doc: string | null
    file: string | null
  }

  export type TestEventJournalCountAggregateOutputType = {
    id: number
    session_id: number
    event_uuid: number
    event_type: number
    event_sub_type: number
    name: number
    scopes: number
    result: number
    started_at: number
    finished_at: number
    start_event_doc: number
    finished_event_doc: number
    file: number
    _all: number
  }


  export type TestEventJournalMinAggregateInputType = {
    id?: true
    session_id?: true
    event_uuid?: true
    event_type?: true
    event_sub_type?: true
    name?: true
    scopes?: true
    result?: true
    started_at?: true
    finished_at?: true
    start_event_doc?: true
    finished_event_doc?: true
    file?: true
  }

  export type TestEventJournalMaxAggregateInputType = {
    id?: true
    session_id?: true
    event_uuid?: true
    event_type?: true
    event_sub_type?: true
    name?: true
    scopes?: true
    result?: true
    started_at?: true
    finished_at?: true
    start_event_doc?: true
    finished_event_doc?: true
    file?: true
  }

  export type TestEventJournalCountAggregateInputType = {
    id?: true
    session_id?: true
    event_uuid?: true
    event_type?: true
    event_sub_type?: true
    name?: true
    scopes?: true
    result?: true
    started_at?: true
    finished_at?: true
    start_event_doc?: true
    finished_event_doc?: true
    file?: true
    _all?: true
  }

  export type TestEventJournalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestEventJournal to aggregate.
     */
    where?: TestEventJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestEventJournals to fetch.
     */
    orderBy?: TestEventJournalOrderByWithRelationInput | TestEventJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestEventJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestEventJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestEventJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestEventJournals
    **/
    _count?: true | TestEventJournalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestEventJournalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestEventJournalMaxAggregateInputType
  }

  export type GetTestEventJournalAggregateType<T extends TestEventJournalAggregateArgs> = {
        [P in keyof T & keyof AggregateTestEventJournal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestEventJournal[P]>
      : GetScalarType<T[P], AggregateTestEventJournal[P]>
  }




  export type TestEventJournalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestEventJournalWhereInput
    orderBy?: TestEventJournalOrderByWithAggregationInput | TestEventJournalOrderByWithAggregationInput[]
    by: TestEventJournalScalarFieldEnum[] | TestEventJournalScalarFieldEnum
    having?: TestEventJournalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestEventJournalCountAggregateInputType | true
    _min?: TestEventJournalMinAggregateInputType
    _max?: TestEventJournalMaxAggregateInputType
  }

  export type TestEventJournalGroupByOutputType = {
    id: string
    session_id: string
    event_uuid: string
    event_type: string
    event_sub_type: string
    name: string
    scopes: string
    result: string | null
    started_at: Date | null
    finished_at: Date | null
    start_event_doc: string | null
    finished_event_doc: string | null
    file: string
    _count: TestEventJournalCountAggregateOutputType | null
    _min: TestEventJournalMinAggregateOutputType | null
    _max: TestEventJournalMaxAggregateOutputType | null
  }

  type GetTestEventJournalGroupByPayload<T extends TestEventJournalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestEventJournalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestEventJournalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestEventJournalGroupByOutputType[P]>
            : GetScalarType<T[P], TestEventJournalGroupByOutputType[P]>
        }
      >
    >


  export type TestEventJournalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    event_uuid?: boolean
    event_type?: boolean
    event_sub_type?: boolean
    name?: boolean
    scopes?: boolean
    result?: boolean
    started_at?: boolean
    finished_at?: boolean
    start_event_doc?: boolean
    finished_event_doc?: boolean
    file?: boolean
  }, ExtArgs["result"]["testEventJournal"]>

  export type TestEventJournalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    event_uuid?: boolean
    event_type?: boolean
    event_sub_type?: boolean
    name?: boolean
    scopes?: boolean
    result?: boolean
    started_at?: boolean
    finished_at?: boolean
    start_event_doc?: boolean
    finished_event_doc?: boolean
    file?: boolean
  }, ExtArgs["result"]["testEventJournal"]>

  export type TestEventJournalSelectScalar = {
    id?: boolean
    session_id?: boolean
    event_uuid?: boolean
    event_type?: boolean
    event_sub_type?: boolean
    name?: boolean
    scopes?: boolean
    result?: boolean
    started_at?: boolean
    finished_at?: boolean
    start_event_doc?: boolean
    finished_event_doc?: boolean
    file?: boolean
  }


  export type $TestEventJournalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestEventJournal"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session_id: string
      event_uuid: string
      event_type: string
      event_sub_type: string
      name: string
      scopes: string
      result: string | null
      started_at: Date | null
      finished_at: Date | null
      start_event_doc: string | null
      finished_event_doc: string | null
      file: string
    }, ExtArgs["result"]["testEventJournal"]>
    composites: {}
  }

  type TestEventJournalGetPayload<S extends boolean | null | undefined | TestEventJournalDefaultArgs> = $Result.GetResult<Prisma.$TestEventJournalPayload, S>

  type TestEventJournalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TestEventJournalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestEventJournalCountAggregateInputType | true
    }

  export interface TestEventJournalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestEventJournal'], meta: { name: 'TestEventJournal' } }
    /**
     * Find zero or one TestEventJournal that matches the filter.
     * @param {TestEventJournalFindUniqueArgs} args - Arguments to find a TestEventJournal
     * @example
     * // Get one TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestEventJournalFindUniqueArgs>(args: SelectSubset<T, TestEventJournalFindUniqueArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TestEventJournal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TestEventJournalFindUniqueOrThrowArgs} args - Arguments to find a TestEventJournal
     * @example
     * // Get one TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestEventJournalFindUniqueOrThrowArgs>(args: SelectSubset<T, TestEventJournalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TestEventJournal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalFindFirstArgs} args - Arguments to find a TestEventJournal
     * @example
     * // Get one TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestEventJournalFindFirstArgs>(args?: SelectSubset<T, TestEventJournalFindFirstArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TestEventJournal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalFindFirstOrThrowArgs} args - Arguments to find a TestEventJournal
     * @example
     * // Get one TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestEventJournalFindFirstOrThrowArgs>(args?: SelectSubset<T, TestEventJournalFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TestEventJournals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestEventJournals
     * const testEventJournals = await prisma.testEventJournal.findMany()
     * 
     * // Get first 10 TestEventJournals
     * const testEventJournals = await prisma.testEventJournal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testEventJournalWithIdOnly = await prisma.testEventJournal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestEventJournalFindManyArgs>(args?: SelectSubset<T, TestEventJournalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TestEventJournal.
     * @param {TestEventJournalCreateArgs} args - Arguments to create a TestEventJournal.
     * @example
     * // Create one TestEventJournal
     * const TestEventJournal = await prisma.testEventJournal.create({
     *   data: {
     *     // ... data to create a TestEventJournal
     *   }
     * })
     * 
     */
    create<T extends TestEventJournalCreateArgs>(args: SelectSubset<T, TestEventJournalCreateArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TestEventJournals.
     * @param {TestEventJournalCreateManyArgs} args - Arguments to create many TestEventJournals.
     * @example
     * // Create many TestEventJournals
     * const testEventJournal = await prisma.testEventJournal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestEventJournalCreateManyArgs>(args?: SelectSubset<T, TestEventJournalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestEventJournals and returns the data saved in the database.
     * @param {TestEventJournalCreateManyAndReturnArgs} args - Arguments to create many TestEventJournals.
     * @example
     * // Create many TestEventJournals
     * const testEventJournal = await prisma.testEventJournal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestEventJournals and only return the `id`
     * const testEventJournalWithIdOnly = await prisma.testEventJournal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestEventJournalCreateManyAndReturnArgs>(args?: SelectSubset<T, TestEventJournalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TestEventJournal.
     * @param {TestEventJournalDeleteArgs} args - Arguments to delete one TestEventJournal.
     * @example
     * // Delete one TestEventJournal
     * const TestEventJournal = await prisma.testEventJournal.delete({
     *   where: {
     *     // ... filter to delete one TestEventJournal
     *   }
     * })
     * 
     */
    delete<T extends TestEventJournalDeleteArgs>(args: SelectSubset<T, TestEventJournalDeleteArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TestEventJournal.
     * @param {TestEventJournalUpdateArgs} args - Arguments to update one TestEventJournal.
     * @example
     * // Update one TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestEventJournalUpdateArgs>(args: SelectSubset<T, TestEventJournalUpdateArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TestEventJournals.
     * @param {TestEventJournalDeleteManyArgs} args - Arguments to filter TestEventJournals to delete.
     * @example
     * // Delete a few TestEventJournals
     * const { count } = await prisma.testEventJournal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestEventJournalDeleteManyArgs>(args?: SelectSubset<T, TestEventJournalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestEventJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestEventJournals
     * const testEventJournal = await prisma.testEventJournal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestEventJournalUpdateManyArgs>(args: SelectSubset<T, TestEventJournalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestEventJournal.
     * @param {TestEventJournalUpsertArgs} args - Arguments to update or create a TestEventJournal.
     * @example
     * // Update or create a TestEventJournal
     * const testEventJournal = await prisma.testEventJournal.upsert({
     *   create: {
     *     // ... data to create a TestEventJournal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestEventJournal we want to update
     *   }
     * })
     */
    upsert<T extends TestEventJournalUpsertArgs>(args: SelectSubset<T, TestEventJournalUpsertArgs<ExtArgs>>): Prisma__TestEventJournalClient<$Result.GetResult<Prisma.$TestEventJournalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TestEventJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalCountArgs} args - Arguments to filter TestEventJournals to count.
     * @example
     * // Count the number of TestEventJournals
     * const count = await prisma.testEventJournal.count({
     *   where: {
     *     // ... the filter for the TestEventJournals we want to count
     *   }
     * })
    **/
    count<T extends TestEventJournalCountArgs>(
      args?: Subset<T, TestEventJournalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestEventJournalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestEventJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestEventJournalAggregateArgs>(args: Subset<T, TestEventJournalAggregateArgs>): Prisma.PrismaPromise<GetTestEventJournalAggregateType<T>>

    /**
     * Group by TestEventJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestEventJournalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestEventJournalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestEventJournalGroupByArgs['orderBy'] }
        : { orderBy?: TestEventJournalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestEventJournalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestEventJournalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestEventJournal model
   */
  readonly fields: TestEventJournalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestEventJournal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestEventJournalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestEventJournal model
   */ 
  interface TestEventJournalFieldRefs {
    readonly id: FieldRef<"TestEventJournal", 'String'>
    readonly session_id: FieldRef<"TestEventJournal", 'String'>
    readonly event_uuid: FieldRef<"TestEventJournal", 'String'>
    readonly event_type: FieldRef<"TestEventJournal", 'String'>
    readonly event_sub_type: FieldRef<"TestEventJournal", 'String'>
    readonly name: FieldRef<"TestEventJournal", 'String'>
    readonly scopes: FieldRef<"TestEventJournal", 'String'>
    readonly result: FieldRef<"TestEventJournal", 'String'>
    readonly started_at: FieldRef<"TestEventJournal", 'DateTime'>
    readonly finished_at: FieldRef<"TestEventJournal", 'DateTime'>
    readonly start_event_doc: FieldRef<"TestEventJournal", 'String'>
    readonly finished_event_doc: FieldRef<"TestEventJournal", 'String'>
    readonly file: FieldRef<"TestEventJournal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TestEventJournal findUnique
   */
  export type TestEventJournalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter, which TestEventJournal to fetch.
     */
    where: TestEventJournalWhereUniqueInput
  }

  /**
   * TestEventJournal findUniqueOrThrow
   */
  export type TestEventJournalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter, which TestEventJournal to fetch.
     */
    where: TestEventJournalWhereUniqueInput
  }

  /**
   * TestEventJournal findFirst
   */
  export type TestEventJournalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter, which TestEventJournal to fetch.
     */
    where?: TestEventJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestEventJournals to fetch.
     */
    orderBy?: TestEventJournalOrderByWithRelationInput | TestEventJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestEventJournals.
     */
    cursor?: TestEventJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestEventJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestEventJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestEventJournals.
     */
    distinct?: TestEventJournalScalarFieldEnum | TestEventJournalScalarFieldEnum[]
  }

  /**
   * TestEventJournal findFirstOrThrow
   */
  export type TestEventJournalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter, which TestEventJournal to fetch.
     */
    where?: TestEventJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestEventJournals to fetch.
     */
    orderBy?: TestEventJournalOrderByWithRelationInput | TestEventJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestEventJournals.
     */
    cursor?: TestEventJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestEventJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestEventJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestEventJournals.
     */
    distinct?: TestEventJournalScalarFieldEnum | TestEventJournalScalarFieldEnum[]
  }

  /**
   * TestEventJournal findMany
   */
  export type TestEventJournalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter, which TestEventJournals to fetch.
     */
    where?: TestEventJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestEventJournals to fetch.
     */
    orderBy?: TestEventJournalOrderByWithRelationInput | TestEventJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestEventJournals.
     */
    cursor?: TestEventJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestEventJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestEventJournals.
     */
    skip?: number
    distinct?: TestEventJournalScalarFieldEnum | TestEventJournalScalarFieldEnum[]
  }

  /**
   * TestEventJournal create
   */
  export type TestEventJournalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * The data needed to create a TestEventJournal.
     */
    data: XOR<TestEventJournalCreateInput, TestEventJournalUncheckedCreateInput>
  }

  /**
   * TestEventJournal createMany
   */
  export type TestEventJournalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestEventJournals.
     */
    data: TestEventJournalCreateManyInput | TestEventJournalCreateManyInput[]
  }

  /**
   * TestEventJournal createManyAndReturn
   */
  export type TestEventJournalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TestEventJournals.
     */
    data: TestEventJournalCreateManyInput | TestEventJournalCreateManyInput[]
  }

  /**
   * TestEventJournal update
   */
  export type TestEventJournalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * The data needed to update a TestEventJournal.
     */
    data: XOR<TestEventJournalUpdateInput, TestEventJournalUncheckedUpdateInput>
    /**
     * Choose, which TestEventJournal to update.
     */
    where: TestEventJournalWhereUniqueInput
  }

  /**
   * TestEventJournal updateMany
   */
  export type TestEventJournalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestEventJournals.
     */
    data: XOR<TestEventJournalUpdateManyMutationInput, TestEventJournalUncheckedUpdateManyInput>
    /**
     * Filter which TestEventJournals to update
     */
    where?: TestEventJournalWhereInput
  }

  /**
   * TestEventJournal upsert
   */
  export type TestEventJournalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * The filter to search for the TestEventJournal to update in case it exists.
     */
    where: TestEventJournalWhereUniqueInput
    /**
     * In case the TestEventJournal found by the `where` argument doesn't exist, create a new TestEventJournal with this data.
     */
    create: XOR<TestEventJournalCreateInput, TestEventJournalUncheckedCreateInput>
    /**
     * In case the TestEventJournal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestEventJournalUpdateInput, TestEventJournalUncheckedUpdateInput>
  }

  /**
   * TestEventJournal delete
   */
  export type TestEventJournalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
    /**
     * Filter which TestEventJournal to delete.
     */
    where: TestEventJournalWhereUniqueInput
  }

  /**
   * TestEventJournal deleteMany
   */
  export type TestEventJournalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestEventJournals to delete
     */
    where?: TestEventJournalWhereInput
  }

  /**
   * TestEventJournal without action
   */
  export type TestEventJournalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestEventJournal
     */
    select?: TestEventJournalSelect<ExtArgs> | null
  }


  /**
   * Model AppInformation
   */

  export type AggregateAppInformation = {
    _count: AppInformationCountAggregateOutputType | null
    _min: AppInformationMinAggregateOutputType | null
    _max: AppInformationMaxAggregateOutputType | null
  }

  export type AppInformationMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    uploadedFileName: string | null
    path: string | null
    platform: string | null
    fileSize: string | null
    appBundleId: string | null
    createdAt: Date | null
  }

  export type AppInformationMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    uploadedFileName: string | null
    path: string | null
    platform: string | null
    fileSize: string | null
    appBundleId: string | null
    createdAt: Date | null
  }

  export type AppInformationCountAggregateOutputType = {
    id: number
    fileName: number
    uploadedFileName: number
    path: number
    platform: number
    fileSize: number
    appBundleId: number
    createdAt: number
    _all: number
  }


  export type AppInformationMinAggregateInputType = {
    id?: true
    fileName?: true
    uploadedFileName?: true
    path?: true
    platform?: true
    fileSize?: true
    appBundleId?: true
    createdAt?: true
  }

  export type AppInformationMaxAggregateInputType = {
    id?: true
    fileName?: true
    uploadedFileName?: true
    path?: true
    platform?: true
    fileSize?: true
    appBundleId?: true
    createdAt?: true
  }

  export type AppInformationCountAggregateInputType = {
    id?: true
    fileName?: true
    uploadedFileName?: true
    path?: true
    platform?: true
    fileSize?: true
    appBundleId?: true
    createdAt?: true
    _all?: true
  }

  export type AppInformationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppInformation to aggregate.
     */
    where?: AppInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppInformations to fetch.
     */
    orderBy?: AppInformationOrderByWithRelationInput | AppInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppInformations
    **/
    _count?: true | AppInformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppInformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppInformationMaxAggregateInputType
  }

  export type GetAppInformationAggregateType<T extends AppInformationAggregateArgs> = {
        [P in keyof T & keyof AggregateAppInformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppInformation[P]>
      : GetScalarType<T[P], AggregateAppInformation[P]>
  }




  export type AppInformationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppInformationWhereInput
    orderBy?: AppInformationOrderByWithAggregationInput | AppInformationOrderByWithAggregationInput[]
    by: AppInformationScalarFieldEnum[] | AppInformationScalarFieldEnum
    having?: AppInformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppInformationCountAggregateInputType | true
    _min?: AppInformationMinAggregateInputType
    _max?: AppInformationMaxAggregateInputType
  }

  export type AppInformationGroupByOutputType = {
    id: string
    fileName: string
    uploadedFileName: string
    path: string
    platform: string
    fileSize: string
    appBundleId: string
    createdAt: Date
    _count: AppInformationCountAggregateOutputType | null
    _min: AppInformationMinAggregateOutputType | null
    _max: AppInformationMaxAggregateOutputType | null
  }

  type GetAppInformationGroupByPayload<T extends AppInformationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppInformationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppInformationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppInformationGroupByOutputType[P]>
            : GetScalarType<T[P], AppInformationGroupByOutputType[P]>
        }
      >
    >


  export type AppInformationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    uploadedFileName?: boolean
    path?: boolean
    platform?: boolean
    fileSize?: boolean
    appBundleId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["appInformation"]>

  export type AppInformationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    uploadedFileName?: boolean
    path?: boolean
    platform?: boolean
    fileSize?: boolean
    appBundleId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["appInformation"]>

  export type AppInformationSelectScalar = {
    id?: boolean
    fileName?: boolean
    uploadedFileName?: boolean
    path?: boolean
    platform?: boolean
    fileSize?: boolean
    appBundleId?: boolean
    createdAt?: boolean
  }


  export type $AppInformationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppInformation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      uploadedFileName: string
      path: string
      platform: string
      fileSize: string
      appBundleId: string
      createdAt: Date
    }, ExtArgs["result"]["appInformation"]>
    composites: {}
  }

  type AppInformationGetPayload<S extends boolean | null | undefined | AppInformationDefaultArgs> = $Result.GetResult<Prisma.$AppInformationPayload, S>

  type AppInformationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppInformationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppInformationCountAggregateInputType | true
    }

  export interface AppInformationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppInformation'], meta: { name: 'AppInformation' } }
    /**
     * Find zero or one AppInformation that matches the filter.
     * @param {AppInformationFindUniqueArgs} args - Arguments to find a AppInformation
     * @example
     * // Get one AppInformation
     * const appInformation = await prisma.appInformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppInformationFindUniqueArgs>(args: SelectSubset<T, AppInformationFindUniqueArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AppInformation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppInformationFindUniqueOrThrowArgs} args - Arguments to find a AppInformation
     * @example
     * // Get one AppInformation
     * const appInformation = await prisma.appInformation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppInformationFindUniqueOrThrowArgs>(args: SelectSubset<T, AppInformationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AppInformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationFindFirstArgs} args - Arguments to find a AppInformation
     * @example
     * // Get one AppInformation
     * const appInformation = await prisma.appInformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppInformationFindFirstArgs>(args?: SelectSubset<T, AppInformationFindFirstArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AppInformation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationFindFirstOrThrowArgs} args - Arguments to find a AppInformation
     * @example
     * // Get one AppInformation
     * const appInformation = await prisma.appInformation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppInformationFindFirstOrThrowArgs>(args?: SelectSubset<T, AppInformationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AppInformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppInformations
     * const appInformations = await prisma.appInformation.findMany()
     * 
     * // Get first 10 AppInformations
     * const appInformations = await prisma.appInformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appInformationWithIdOnly = await prisma.appInformation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppInformationFindManyArgs>(args?: SelectSubset<T, AppInformationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AppInformation.
     * @param {AppInformationCreateArgs} args - Arguments to create a AppInformation.
     * @example
     * // Create one AppInformation
     * const AppInformation = await prisma.appInformation.create({
     *   data: {
     *     // ... data to create a AppInformation
     *   }
     * })
     * 
     */
    create<T extends AppInformationCreateArgs>(args: SelectSubset<T, AppInformationCreateArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AppInformations.
     * @param {AppInformationCreateManyArgs} args - Arguments to create many AppInformations.
     * @example
     * // Create many AppInformations
     * const appInformation = await prisma.appInformation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppInformationCreateManyArgs>(args?: SelectSubset<T, AppInformationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppInformations and returns the data saved in the database.
     * @param {AppInformationCreateManyAndReturnArgs} args - Arguments to create many AppInformations.
     * @example
     * // Create many AppInformations
     * const appInformation = await prisma.appInformation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppInformations and only return the `id`
     * const appInformationWithIdOnly = await prisma.appInformation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppInformationCreateManyAndReturnArgs>(args?: SelectSubset<T, AppInformationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AppInformation.
     * @param {AppInformationDeleteArgs} args - Arguments to delete one AppInformation.
     * @example
     * // Delete one AppInformation
     * const AppInformation = await prisma.appInformation.delete({
     *   where: {
     *     // ... filter to delete one AppInformation
     *   }
     * })
     * 
     */
    delete<T extends AppInformationDeleteArgs>(args: SelectSubset<T, AppInformationDeleteArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AppInformation.
     * @param {AppInformationUpdateArgs} args - Arguments to update one AppInformation.
     * @example
     * // Update one AppInformation
     * const appInformation = await prisma.appInformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppInformationUpdateArgs>(args: SelectSubset<T, AppInformationUpdateArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AppInformations.
     * @param {AppInformationDeleteManyArgs} args - Arguments to filter AppInformations to delete.
     * @example
     * // Delete a few AppInformations
     * const { count } = await prisma.appInformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppInformationDeleteManyArgs>(args?: SelectSubset<T, AppInformationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppInformations
     * const appInformation = await prisma.appInformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppInformationUpdateManyArgs>(args: SelectSubset<T, AppInformationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppInformation.
     * @param {AppInformationUpsertArgs} args - Arguments to update or create a AppInformation.
     * @example
     * // Update or create a AppInformation
     * const appInformation = await prisma.appInformation.upsert({
     *   create: {
     *     // ... data to create a AppInformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppInformation we want to update
     *   }
     * })
     */
    upsert<T extends AppInformationUpsertArgs>(args: SelectSubset<T, AppInformationUpsertArgs<ExtArgs>>): Prisma__AppInformationClient<$Result.GetResult<Prisma.$AppInformationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AppInformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationCountArgs} args - Arguments to filter AppInformations to count.
     * @example
     * // Count the number of AppInformations
     * const count = await prisma.appInformation.count({
     *   where: {
     *     // ... the filter for the AppInformations we want to count
     *   }
     * })
    **/
    count<T extends AppInformationCountArgs>(
      args?: Subset<T, AppInformationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppInformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppInformationAggregateArgs>(args: Subset<T, AppInformationAggregateArgs>): Prisma.PrismaPromise<GetAppInformationAggregateType<T>>

    /**
     * Group by AppInformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppInformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppInformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppInformationGroupByArgs['orderBy'] }
        : { orderBy?: AppInformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppInformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppInformationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppInformation model
   */
  readonly fields: AppInformationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppInformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppInformationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppInformation model
   */ 
  interface AppInformationFieldRefs {
    readonly id: FieldRef<"AppInformation", 'String'>
    readonly fileName: FieldRef<"AppInformation", 'String'>
    readonly uploadedFileName: FieldRef<"AppInformation", 'String'>
    readonly path: FieldRef<"AppInformation", 'String'>
    readonly platform: FieldRef<"AppInformation", 'String'>
    readonly fileSize: FieldRef<"AppInformation", 'String'>
    readonly appBundleId: FieldRef<"AppInformation", 'String'>
    readonly createdAt: FieldRef<"AppInformation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppInformation findUnique
   */
  export type AppInformationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter, which AppInformation to fetch.
     */
    where: AppInformationWhereUniqueInput
  }

  /**
   * AppInformation findUniqueOrThrow
   */
  export type AppInformationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter, which AppInformation to fetch.
     */
    where: AppInformationWhereUniqueInput
  }

  /**
   * AppInformation findFirst
   */
  export type AppInformationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter, which AppInformation to fetch.
     */
    where?: AppInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppInformations to fetch.
     */
    orderBy?: AppInformationOrderByWithRelationInput | AppInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppInformations.
     */
    cursor?: AppInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppInformations.
     */
    distinct?: AppInformationScalarFieldEnum | AppInformationScalarFieldEnum[]
  }

  /**
   * AppInformation findFirstOrThrow
   */
  export type AppInformationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter, which AppInformation to fetch.
     */
    where?: AppInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppInformations to fetch.
     */
    orderBy?: AppInformationOrderByWithRelationInput | AppInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppInformations.
     */
    cursor?: AppInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppInformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppInformations.
     */
    distinct?: AppInformationScalarFieldEnum | AppInformationScalarFieldEnum[]
  }

  /**
   * AppInformation findMany
   */
  export type AppInformationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter, which AppInformations to fetch.
     */
    where?: AppInformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppInformations to fetch.
     */
    orderBy?: AppInformationOrderByWithRelationInput | AppInformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppInformations.
     */
    cursor?: AppInformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppInformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppInformations.
     */
    skip?: number
    distinct?: AppInformationScalarFieldEnum | AppInformationScalarFieldEnum[]
  }

  /**
   * AppInformation create
   */
  export type AppInformationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * The data needed to create a AppInformation.
     */
    data: XOR<AppInformationCreateInput, AppInformationUncheckedCreateInput>
  }

  /**
   * AppInformation createMany
   */
  export type AppInformationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppInformations.
     */
    data: AppInformationCreateManyInput | AppInformationCreateManyInput[]
  }

  /**
   * AppInformation createManyAndReturn
   */
  export type AppInformationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AppInformations.
     */
    data: AppInformationCreateManyInput | AppInformationCreateManyInput[]
  }

  /**
   * AppInformation update
   */
  export type AppInformationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * The data needed to update a AppInformation.
     */
    data: XOR<AppInformationUpdateInput, AppInformationUncheckedUpdateInput>
    /**
     * Choose, which AppInformation to update.
     */
    where: AppInformationWhereUniqueInput
  }

  /**
   * AppInformation updateMany
   */
  export type AppInformationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppInformations.
     */
    data: XOR<AppInformationUpdateManyMutationInput, AppInformationUncheckedUpdateManyInput>
    /**
     * Filter which AppInformations to update
     */
    where?: AppInformationWhereInput
  }

  /**
   * AppInformation upsert
   */
  export type AppInformationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * The filter to search for the AppInformation to update in case it exists.
     */
    where: AppInformationWhereUniqueInput
    /**
     * In case the AppInformation found by the `where` argument doesn't exist, create a new AppInformation with this data.
     */
    create: XOR<AppInformationCreateInput, AppInformationUncheckedCreateInput>
    /**
     * In case the AppInformation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppInformationUpdateInput, AppInformationUncheckedUpdateInput>
  }

  /**
   * AppInformation delete
   */
  export type AppInformationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
    /**
     * Filter which AppInformation to delete.
     */
    where: AppInformationWhereUniqueInput
  }

  /**
   * AppInformation deleteMany
   */
  export type AppInformationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppInformations to delete
     */
    where?: AppInformationWhereInput
  }

  /**
   * AppInformation without action
   */
  export type AppInformationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppInformation
     */
    select?: AppInformationSelect<ExtArgs> | null
  }


  /**
   * Model DeviceTags
   */

  export type AggregateDeviceTags = {
    _count: DeviceTagsCountAggregateOutputType | null
    _min: DeviceTagsMinAggregateOutputType | null
    _max: DeviceTagsMaxAggregateOutputType | null
  }

  export type DeviceTagsMinAggregateOutputType = {
    host: string | null
    udid: string | null
    tags: string | null
  }

  export type DeviceTagsMaxAggregateOutputType = {
    host: string | null
    udid: string | null
    tags: string | null
  }

  export type DeviceTagsCountAggregateOutputType = {
    host: number
    udid: number
    tags: number
    _all: number
  }


  export type DeviceTagsMinAggregateInputType = {
    host?: true
    udid?: true
    tags?: true
  }

  export type DeviceTagsMaxAggregateInputType = {
    host?: true
    udid?: true
    tags?: true
  }

  export type DeviceTagsCountAggregateInputType = {
    host?: true
    udid?: true
    tags?: true
    _all?: true
  }

  export type DeviceTagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceTags to aggregate.
     */
    where?: DeviceTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTags to fetch.
     */
    orderBy?: DeviceTagsOrderByWithRelationInput | DeviceTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceTags
    **/
    _count?: true | DeviceTagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceTagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceTagsMaxAggregateInputType
  }

  export type GetDeviceTagsAggregateType<T extends DeviceTagsAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceTags[P]>
      : GetScalarType<T[P], AggregateDeviceTags[P]>
  }




  export type DeviceTagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceTagsWhereInput
    orderBy?: DeviceTagsOrderByWithAggregationInput | DeviceTagsOrderByWithAggregationInput[]
    by: DeviceTagsScalarFieldEnum[] | DeviceTagsScalarFieldEnum
    having?: DeviceTagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceTagsCountAggregateInputType | true
    _min?: DeviceTagsMinAggregateInputType
    _max?: DeviceTagsMaxAggregateInputType
  }

  export type DeviceTagsGroupByOutputType = {
    host: string
    udid: string
    tags: string | null
    _count: DeviceTagsCountAggregateOutputType | null
    _min: DeviceTagsMinAggregateOutputType | null
    _max: DeviceTagsMaxAggregateOutputType | null
  }

  type GetDeviceTagsGroupByPayload<T extends DeviceTagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceTagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceTagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceTagsGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceTagsGroupByOutputType[P]>
        }
      >
    >


  export type DeviceTagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    host?: boolean
    udid?: boolean
    tags?: boolean
  }, ExtArgs["result"]["deviceTags"]>

  export type DeviceTagsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    host?: boolean
    udid?: boolean
    tags?: boolean
  }, ExtArgs["result"]["deviceTags"]>

  export type DeviceTagsSelectScalar = {
    host?: boolean
    udid?: boolean
    tags?: boolean
  }


  export type $DeviceTagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceTags"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      host: string
      udid: string
      tags: string | null
    }, ExtArgs["result"]["deviceTags"]>
    composites: {}
  }

  type DeviceTagsGetPayload<S extends boolean | null | undefined | DeviceTagsDefaultArgs> = $Result.GetResult<Prisma.$DeviceTagsPayload, S>

  type DeviceTagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DeviceTagsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeviceTagsCountAggregateInputType | true
    }

  export interface DeviceTagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceTags'], meta: { name: 'DeviceTags' } }
    /**
     * Find zero or one DeviceTags that matches the filter.
     * @param {DeviceTagsFindUniqueArgs} args - Arguments to find a DeviceTags
     * @example
     * // Get one DeviceTags
     * const deviceTags = await prisma.deviceTags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceTagsFindUniqueArgs>(args: SelectSubset<T, DeviceTagsFindUniqueArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DeviceTags that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DeviceTagsFindUniqueOrThrowArgs} args - Arguments to find a DeviceTags
     * @example
     * // Get one DeviceTags
     * const deviceTags = await prisma.deviceTags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceTagsFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceTagsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DeviceTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsFindFirstArgs} args - Arguments to find a DeviceTags
     * @example
     * // Get one DeviceTags
     * const deviceTags = await prisma.deviceTags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceTagsFindFirstArgs>(args?: SelectSubset<T, DeviceTagsFindFirstArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DeviceTags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsFindFirstOrThrowArgs} args - Arguments to find a DeviceTags
     * @example
     * // Get one DeviceTags
     * const deviceTags = await prisma.deviceTags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceTagsFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceTagsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DeviceTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceTags
     * const deviceTags = await prisma.deviceTags.findMany()
     * 
     * // Get first 10 DeviceTags
     * const deviceTags = await prisma.deviceTags.findMany({ take: 10 })
     * 
     * // Only select the `host`
     * const deviceTagsWithHostOnly = await prisma.deviceTags.findMany({ select: { host: true } })
     * 
     */
    findMany<T extends DeviceTagsFindManyArgs>(args?: SelectSubset<T, DeviceTagsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DeviceTags.
     * @param {DeviceTagsCreateArgs} args - Arguments to create a DeviceTags.
     * @example
     * // Create one DeviceTags
     * const DeviceTags = await prisma.deviceTags.create({
     *   data: {
     *     // ... data to create a DeviceTags
     *   }
     * })
     * 
     */
    create<T extends DeviceTagsCreateArgs>(args: SelectSubset<T, DeviceTagsCreateArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DeviceTags.
     * @param {DeviceTagsCreateManyArgs} args - Arguments to create many DeviceTags.
     * @example
     * // Create many DeviceTags
     * const deviceTags = await prisma.deviceTags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceTagsCreateManyArgs>(args?: SelectSubset<T, DeviceTagsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceTags and returns the data saved in the database.
     * @param {DeviceTagsCreateManyAndReturnArgs} args - Arguments to create many DeviceTags.
     * @example
     * // Create many DeviceTags
     * const deviceTags = await prisma.deviceTags.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceTags and only return the `host`
     * const deviceTagsWithHostOnly = await prisma.deviceTags.createManyAndReturn({ 
     *   select: { host: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceTagsCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceTagsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DeviceTags.
     * @param {DeviceTagsDeleteArgs} args - Arguments to delete one DeviceTags.
     * @example
     * // Delete one DeviceTags
     * const DeviceTags = await prisma.deviceTags.delete({
     *   where: {
     *     // ... filter to delete one DeviceTags
     *   }
     * })
     * 
     */
    delete<T extends DeviceTagsDeleteArgs>(args: SelectSubset<T, DeviceTagsDeleteArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DeviceTags.
     * @param {DeviceTagsUpdateArgs} args - Arguments to update one DeviceTags.
     * @example
     * // Update one DeviceTags
     * const deviceTags = await prisma.deviceTags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceTagsUpdateArgs>(args: SelectSubset<T, DeviceTagsUpdateArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DeviceTags.
     * @param {DeviceTagsDeleteManyArgs} args - Arguments to filter DeviceTags to delete.
     * @example
     * // Delete a few DeviceTags
     * const { count } = await prisma.deviceTags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceTagsDeleteManyArgs>(args?: SelectSubset<T, DeviceTagsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceTags
     * const deviceTags = await prisma.deviceTags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceTagsUpdateManyArgs>(args: SelectSubset<T, DeviceTagsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DeviceTags.
     * @param {DeviceTagsUpsertArgs} args - Arguments to update or create a DeviceTags.
     * @example
     * // Update or create a DeviceTags
     * const deviceTags = await prisma.deviceTags.upsert({
     *   create: {
     *     // ... data to create a DeviceTags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceTags we want to update
     *   }
     * })
     */
    upsert<T extends DeviceTagsUpsertArgs>(args: SelectSubset<T, DeviceTagsUpsertArgs<ExtArgs>>): Prisma__DeviceTagsClient<$Result.GetResult<Prisma.$DeviceTagsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DeviceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsCountArgs} args - Arguments to filter DeviceTags to count.
     * @example
     * // Count the number of DeviceTags
     * const count = await prisma.deviceTags.count({
     *   where: {
     *     // ... the filter for the DeviceTags we want to count
     *   }
     * })
    **/
    count<T extends DeviceTagsCountArgs>(
      args?: Subset<T, DeviceTagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceTagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceTagsAggregateArgs>(args: Subset<T, DeviceTagsAggregateArgs>): Prisma.PrismaPromise<GetDeviceTagsAggregateType<T>>

    /**
     * Group by DeviceTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceTagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceTagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceTagsGroupByArgs['orderBy'] }
        : { orderBy?: DeviceTagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceTagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceTags model
   */
  readonly fields: DeviceTagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceTags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceTagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceTags model
   */ 
  interface DeviceTagsFieldRefs {
    readonly host: FieldRef<"DeviceTags", 'String'>
    readonly udid: FieldRef<"DeviceTags", 'String'>
    readonly tags: FieldRef<"DeviceTags", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DeviceTags findUnique
   */
  export type DeviceTagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter, which DeviceTags to fetch.
     */
    where: DeviceTagsWhereUniqueInput
  }

  /**
   * DeviceTags findUniqueOrThrow
   */
  export type DeviceTagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter, which DeviceTags to fetch.
     */
    where: DeviceTagsWhereUniqueInput
  }

  /**
   * DeviceTags findFirst
   */
  export type DeviceTagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter, which DeviceTags to fetch.
     */
    where?: DeviceTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTags to fetch.
     */
    orderBy?: DeviceTagsOrderByWithRelationInput | DeviceTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceTags.
     */
    cursor?: DeviceTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceTags.
     */
    distinct?: DeviceTagsScalarFieldEnum | DeviceTagsScalarFieldEnum[]
  }

  /**
   * DeviceTags findFirstOrThrow
   */
  export type DeviceTagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter, which DeviceTags to fetch.
     */
    where?: DeviceTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTags to fetch.
     */
    orderBy?: DeviceTagsOrderByWithRelationInput | DeviceTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceTags.
     */
    cursor?: DeviceTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceTags.
     */
    distinct?: DeviceTagsScalarFieldEnum | DeviceTagsScalarFieldEnum[]
  }

  /**
   * DeviceTags findMany
   */
  export type DeviceTagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter, which DeviceTags to fetch.
     */
    where?: DeviceTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceTags to fetch.
     */
    orderBy?: DeviceTagsOrderByWithRelationInput | DeviceTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceTags.
     */
    cursor?: DeviceTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceTags.
     */
    skip?: number
    distinct?: DeviceTagsScalarFieldEnum | DeviceTagsScalarFieldEnum[]
  }

  /**
   * DeviceTags create
   */
  export type DeviceTagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * The data needed to create a DeviceTags.
     */
    data: XOR<DeviceTagsCreateInput, DeviceTagsUncheckedCreateInput>
  }

  /**
   * DeviceTags createMany
   */
  export type DeviceTagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceTags.
     */
    data: DeviceTagsCreateManyInput | DeviceTagsCreateManyInput[]
  }

  /**
   * DeviceTags createManyAndReturn
   */
  export type DeviceTagsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DeviceTags.
     */
    data: DeviceTagsCreateManyInput | DeviceTagsCreateManyInput[]
  }

  /**
   * DeviceTags update
   */
  export type DeviceTagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * The data needed to update a DeviceTags.
     */
    data: XOR<DeviceTagsUpdateInput, DeviceTagsUncheckedUpdateInput>
    /**
     * Choose, which DeviceTags to update.
     */
    where: DeviceTagsWhereUniqueInput
  }

  /**
   * DeviceTags updateMany
   */
  export type DeviceTagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceTags.
     */
    data: XOR<DeviceTagsUpdateManyMutationInput, DeviceTagsUncheckedUpdateManyInput>
    /**
     * Filter which DeviceTags to update
     */
    where?: DeviceTagsWhereInput
  }

  /**
   * DeviceTags upsert
   */
  export type DeviceTagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * The filter to search for the DeviceTags to update in case it exists.
     */
    where: DeviceTagsWhereUniqueInput
    /**
     * In case the DeviceTags found by the `where` argument doesn't exist, create a new DeviceTags with this data.
     */
    create: XOR<DeviceTagsCreateInput, DeviceTagsUncheckedCreateInput>
    /**
     * In case the DeviceTags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceTagsUpdateInput, DeviceTagsUncheckedUpdateInput>
  }

  /**
   * DeviceTags delete
   */
  export type DeviceTagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
    /**
     * Filter which DeviceTags to delete.
     */
    where: DeviceTagsWhereUniqueInput
  }

  /**
   * DeviceTags deleteMany
   */
  export type DeviceTagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceTags to delete
     */
    where?: DeviceTagsWhereInput
  }

  /**
   * DeviceTags without action
   */
  export type DeviceTagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceTags
     */
    select?: DeviceTagsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BuildScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuildScalarFieldEnum = (typeof BuildScalarFieldEnum)[keyof typeof BuildScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    buildId: 'buildId',
    name: 'name',
    status: 'status',
    desiredCapabilities: 'desiredCapabilities',
    sessionCapabilities: 'sessionCapabilities',
    nodeId: 'nodeId',
    hasLiveVideo: 'hasLiveVideo',
    videoRecording: 'videoRecording',
    deviceLogs: 'deviceLogs',
    appProfiling: 'appProfiling',
    startTime: 'startTime',
    endTime: 'endTime',
    failureReason: 'failureReason',
    deviceUdid: 'deviceUdid',
    devicePlatform: 'devicePlatform',
    deviceVersion: 'deviceVersion',
    deviceName: 'deviceName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SessionLogScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    commandName: 'commandName',
    url: 'url',
    method: 'method',
    title: 'title',
    subtitle: 'subtitle',
    body: 'body',
    response: 'response',
    screenshot: 'screenshot',
    isSuccess: 'isSuccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    eventId: 'eventId'
  };

  export type SessionLogScalarFieldEnum = (typeof SessionLogScalarFieldEnum)[keyof typeof SessionLogScalarFieldEnum]


  export const TestEventJournalScalarFieldEnum: {
    id: 'id',
    session_id: 'session_id',
    event_uuid: 'event_uuid',
    event_type: 'event_type',
    event_sub_type: 'event_sub_type',
    name: 'name',
    scopes: 'scopes',
    result: 'result',
    started_at: 'started_at',
    finished_at: 'finished_at',
    start_event_doc: 'start_event_doc',
    finished_event_doc: 'finished_event_doc',
    file: 'file'
  };

  export type TestEventJournalScalarFieldEnum = (typeof TestEventJournalScalarFieldEnum)[keyof typeof TestEventJournalScalarFieldEnum]


  export const AppInformationScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    uploadedFileName: 'uploadedFileName',
    path: 'path',
    platform: 'platform',
    fileSize: 'fileSize',
    appBundleId: 'appBundleId',
    createdAt: 'createdAt'
  };

  export type AppInformationScalarFieldEnum = (typeof AppInformationScalarFieldEnum)[keyof typeof AppInformationScalarFieldEnum]


  export const DeviceTagsScalarFieldEnum: {
    host: 'host',
    udid: 'udid',
    tags: 'tags'
  };

  export type DeviceTagsScalarFieldEnum = (typeof DeviceTagsScalarFieldEnum)[keyof typeof DeviceTagsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type BuildWhereInput = {
    AND?: BuildWhereInput | BuildWhereInput[]
    OR?: BuildWhereInput[]
    NOT?: BuildWhereInput | BuildWhereInput[]
    id?: StringFilter<"Build"> | string
    name?: StringNullableFilter<"Build"> | string | null
    createdAt?: DateTimeFilter<"Build"> | Date | string
    updatedAt?: DateTimeFilter<"Build"> | Date | string
    sessions?: SessionListRelationFilter
  }

  export type BuildOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type BuildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuildWhereInput | BuildWhereInput[]
    OR?: BuildWhereInput[]
    NOT?: BuildWhereInput | BuildWhereInput[]
    name?: StringNullableFilter<"Build"> | string | null
    createdAt?: DateTimeFilter<"Build"> | Date | string
    updatedAt?: DateTimeFilter<"Build"> | Date | string
    sessions?: SessionListRelationFilter
  }, "id">

  export type BuildOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuildCountOrderByAggregateInput
    _max?: BuildMaxOrderByAggregateInput
    _min?: BuildMinOrderByAggregateInput
  }

  export type BuildScalarWhereWithAggregatesInput = {
    AND?: BuildScalarWhereWithAggregatesInput | BuildScalarWhereWithAggregatesInput[]
    OR?: BuildScalarWhereWithAggregatesInput[]
    NOT?: BuildScalarWhereWithAggregatesInput | BuildScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Build"> | string
    name?: StringNullableWithAggregatesFilter<"Build"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Build"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Build"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    buildId?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    desiredCapabilities?: StringFilter<"Session"> | string
    sessionCapabilities?: StringFilter<"Session"> | string
    nodeId?: StringFilter<"Session"> | string
    hasLiveVideo?: BoolFilter<"Session"> | boolean
    videoRecording?: StringNullableFilter<"Session"> | string | null
    deviceLogs?: StringNullableFilter<"Session"> | string | null
    appProfiling?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    failureReason?: StringNullableFilter<"Session"> | string | null
    deviceUdid?: StringFilter<"Session"> | string
    devicePlatform?: StringFilter<"Session"> | string
    deviceVersion?: StringFilter<"Session"> | string
    deviceName?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    build?: XOR<BuildNullableRelationFilter, BuildWhereInput> | null
    sessionLogs?: SessionLogListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    buildId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    desiredCapabilities?: SortOrder
    sessionCapabilities?: SortOrder
    nodeId?: SortOrder
    hasLiveVideo?: SortOrder
    videoRecording?: SortOrderInput | SortOrder
    deviceLogs?: SortOrderInput | SortOrder
    appProfiling?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    deviceUdid?: SortOrder
    devicePlatform?: SortOrder
    deviceVersion?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    build?: BuildOrderByWithRelationInput
    sessionLogs?: SessionLogOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    buildId?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    desiredCapabilities?: StringFilter<"Session"> | string
    sessionCapabilities?: StringFilter<"Session"> | string
    nodeId?: StringFilter<"Session"> | string
    hasLiveVideo?: BoolFilter<"Session"> | boolean
    videoRecording?: StringNullableFilter<"Session"> | string | null
    deviceLogs?: StringNullableFilter<"Session"> | string | null
    appProfiling?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    failureReason?: StringNullableFilter<"Session"> | string | null
    deviceUdid?: StringFilter<"Session"> | string
    devicePlatform?: StringFilter<"Session"> | string
    deviceVersion?: StringFilter<"Session"> | string
    deviceName?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    build?: XOR<BuildNullableRelationFilter, BuildWhereInput> | null
    sessionLogs?: SessionLogListRelationFilter
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    buildId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    desiredCapabilities?: SortOrder
    sessionCapabilities?: SortOrder
    nodeId?: SortOrder
    hasLiveVideo?: SortOrder
    videoRecording?: SortOrderInput | SortOrder
    deviceLogs?: SortOrderInput | SortOrder
    appProfiling?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    deviceUdid?: SortOrder
    devicePlatform?: SortOrder
    deviceVersion?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    buildId?: StringNullableWithAggregatesFilter<"Session"> | string | null
    name?: StringNullableWithAggregatesFilter<"Session"> | string | null
    status?: StringWithAggregatesFilter<"Session"> | string
    desiredCapabilities?: StringWithAggregatesFilter<"Session"> | string
    sessionCapabilities?: StringWithAggregatesFilter<"Session"> | string
    nodeId?: StringWithAggregatesFilter<"Session"> | string
    hasLiveVideo?: BoolWithAggregatesFilter<"Session"> | boolean
    videoRecording?: StringNullableWithAggregatesFilter<"Session"> | string | null
    deviceLogs?: StringNullableWithAggregatesFilter<"Session"> | string | null
    appProfiling?: StringNullableWithAggregatesFilter<"Session"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    failureReason?: StringNullableWithAggregatesFilter<"Session"> | string | null
    deviceUdid?: StringWithAggregatesFilter<"Session"> | string
    devicePlatform?: StringWithAggregatesFilter<"Session"> | string
    deviceVersion?: StringWithAggregatesFilter<"Session"> | string
    deviceName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type SessionLogWhereInput = {
    AND?: SessionLogWhereInput | SessionLogWhereInput[]
    OR?: SessionLogWhereInput[]
    NOT?: SessionLogWhereInput | SessionLogWhereInput[]
    id?: StringFilter<"SessionLog"> | string
    sessionId?: StringFilter<"SessionLog"> | string
    commandName?: StringNullableFilter<"SessionLog"> | string | null
    url?: StringFilter<"SessionLog"> | string
    method?: StringFilter<"SessionLog"> | string
    title?: StringFilter<"SessionLog"> | string
    subtitle?: StringNullableFilter<"SessionLog"> | string | null
    body?: StringNullableFilter<"SessionLog"> | string | null
    response?: StringFilter<"SessionLog"> | string
    screenshot?: StringNullableFilter<"SessionLog"> | string | null
    isSuccess?: BoolNullableFilter<"SessionLog"> | boolean | null
    createdAt?: DateTimeFilter<"SessionLog"> | Date | string
    updatedAt?: DateTimeFilter<"SessionLog"> | Date | string
    eventId?: StringNullableFilter<"SessionLog"> | string | null
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }

  export type SessionLogOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    commandName?: SortOrderInput | SortOrder
    url?: SortOrder
    method?: SortOrder
    title?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    response?: SortOrder
    screenshot?: SortOrderInput | SortOrder
    isSuccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    session?: SessionOrderByWithRelationInput
  }

  export type SessionLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionLogWhereInput | SessionLogWhereInput[]
    OR?: SessionLogWhereInput[]
    NOT?: SessionLogWhereInput | SessionLogWhereInput[]
    sessionId?: StringFilter<"SessionLog"> | string
    commandName?: StringNullableFilter<"SessionLog"> | string | null
    url?: StringFilter<"SessionLog"> | string
    method?: StringFilter<"SessionLog"> | string
    title?: StringFilter<"SessionLog"> | string
    subtitle?: StringNullableFilter<"SessionLog"> | string | null
    body?: StringNullableFilter<"SessionLog"> | string | null
    response?: StringFilter<"SessionLog"> | string
    screenshot?: StringNullableFilter<"SessionLog"> | string | null
    isSuccess?: BoolNullableFilter<"SessionLog"> | boolean | null
    createdAt?: DateTimeFilter<"SessionLog"> | Date | string
    updatedAt?: DateTimeFilter<"SessionLog"> | Date | string
    eventId?: StringNullableFilter<"SessionLog"> | string | null
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }, "id">

  export type SessionLogOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    commandName?: SortOrderInput | SortOrder
    url?: SortOrder
    method?: SortOrder
    title?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    response?: SortOrder
    screenshot?: SortOrderInput | SortOrder
    isSuccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    eventId?: SortOrderInput | SortOrder
    _count?: SessionLogCountOrderByAggregateInput
    _max?: SessionLogMaxOrderByAggregateInput
    _min?: SessionLogMinOrderByAggregateInput
  }

  export type SessionLogScalarWhereWithAggregatesInput = {
    AND?: SessionLogScalarWhereWithAggregatesInput | SessionLogScalarWhereWithAggregatesInput[]
    OR?: SessionLogScalarWhereWithAggregatesInput[]
    NOT?: SessionLogScalarWhereWithAggregatesInput | SessionLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionLog"> | string
    sessionId?: StringWithAggregatesFilter<"SessionLog"> | string
    commandName?: StringNullableWithAggregatesFilter<"SessionLog"> | string | null
    url?: StringWithAggregatesFilter<"SessionLog"> | string
    method?: StringWithAggregatesFilter<"SessionLog"> | string
    title?: StringWithAggregatesFilter<"SessionLog"> | string
    subtitle?: StringNullableWithAggregatesFilter<"SessionLog"> | string | null
    body?: StringNullableWithAggregatesFilter<"SessionLog"> | string | null
    response?: StringWithAggregatesFilter<"SessionLog"> | string
    screenshot?: StringNullableWithAggregatesFilter<"SessionLog"> | string | null
    isSuccess?: BoolNullableWithAggregatesFilter<"SessionLog"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"SessionLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SessionLog"> | Date | string
    eventId?: StringNullableWithAggregatesFilter<"SessionLog"> | string | null
  }

  export type TestEventJournalWhereInput = {
    AND?: TestEventJournalWhereInput | TestEventJournalWhereInput[]
    OR?: TestEventJournalWhereInput[]
    NOT?: TestEventJournalWhereInput | TestEventJournalWhereInput[]
    id?: StringFilter<"TestEventJournal"> | string
    session_id?: StringFilter<"TestEventJournal"> | string
    event_uuid?: StringFilter<"TestEventJournal"> | string
    event_type?: StringFilter<"TestEventJournal"> | string
    event_sub_type?: StringFilter<"TestEventJournal"> | string
    name?: StringFilter<"TestEventJournal"> | string
    scopes?: StringFilter<"TestEventJournal"> | string
    result?: StringNullableFilter<"TestEventJournal"> | string | null
    started_at?: DateTimeNullableFilter<"TestEventJournal"> | Date | string | null
    finished_at?: DateTimeNullableFilter<"TestEventJournal"> | Date | string | null
    start_event_doc?: StringNullableFilter<"TestEventJournal"> | string | null
    finished_event_doc?: StringNullableFilter<"TestEventJournal"> | string | null
    file?: StringFilter<"TestEventJournal"> | string
  }

  export type TestEventJournalOrderByWithRelationInput = {
    id?: SortOrder
    session_id?: SortOrder
    event_uuid?: SortOrder
    event_type?: SortOrder
    event_sub_type?: SortOrder
    name?: SortOrder
    scopes?: SortOrder
    result?: SortOrderInput | SortOrder
    started_at?: SortOrderInput | SortOrder
    finished_at?: SortOrderInput | SortOrder
    start_event_doc?: SortOrderInput | SortOrder
    finished_event_doc?: SortOrderInput | SortOrder
    file?: SortOrder
  }

  export type TestEventJournalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    event_uuid?: string
    AND?: TestEventJournalWhereInput | TestEventJournalWhereInput[]
    OR?: TestEventJournalWhereInput[]
    NOT?: TestEventJournalWhereInput | TestEventJournalWhereInput[]
    session_id?: StringFilter<"TestEventJournal"> | string
    event_type?: StringFilter<"TestEventJournal"> | string
    event_sub_type?: StringFilter<"TestEventJournal"> | string
    name?: StringFilter<"TestEventJournal"> | string
    scopes?: StringFilter<"TestEventJournal"> | string
    result?: StringNullableFilter<"TestEventJournal"> | string | null
    started_at?: DateTimeNullableFilter<"TestEventJournal"> | Date | string | null
    finished_at?: DateTimeNullableFilter<"TestEventJournal"> | Date | string | null
    start_event_doc?: StringNullableFilter<"TestEventJournal"> | string | null
    finished_event_doc?: StringNullableFilter<"TestEventJournal"> | string | null
    file?: StringFilter<"TestEventJournal"> | string
  }, "id" | "event_uuid">

  export type TestEventJournalOrderByWithAggregationInput = {
    id?: SortOrder
    session_id?: SortOrder
    event_uuid?: SortOrder
    event_type?: SortOrder
    event_sub_type?: SortOrder
    name?: SortOrder
    scopes?: SortOrder
    result?: SortOrderInput | SortOrder
    started_at?: SortOrderInput | SortOrder
    finished_at?: SortOrderInput | SortOrder
    start_event_doc?: SortOrderInput | SortOrder
    finished_event_doc?: SortOrderInput | SortOrder
    file?: SortOrder
    _count?: TestEventJournalCountOrderByAggregateInput
    _max?: TestEventJournalMaxOrderByAggregateInput
    _min?: TestEventJournalMinOrderByAggregateInput
  }

  export type TestEventJournalScalarWhereWithAggregatesInput = {
    AND?: TestEventJournalScalarWhereWithAggregatesInput | TestEventJournalScalarWhereWithAggregatesInput[]
    OR?: TestEventJournalScalarWhereWithAggregatesInput[]
    NOT?: TestEventJournalScalarWhereWithAggregatesInput | TestEventJournalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestEventJournal"> | string
    session_id?: StringWithAggregatesFilter<"TestEventJournal"> | string
    event_uuid?: StringWithAggregatesFilter<"TestEventJournal"> | string
    event_type?: StringWithAggregatesFilter<"TestEventJournal"> | string
    event_sub_type?: StringWithAggregatesFilter<"TestEventJournal"> | string
    name?: StringWithAggregatesFilter<"TestEventJournal"> | string
    scopes?: StringWithAggregatesFilter<"TestEventJournal"> | string
    result?: StringNullableWithAggregatesFilter<"TestEventJournal"> | string | null
    started_at?: DateTimeNullableWithAggregatesFilter<"TestEventJournal"> | Date | string | null
    finished_at?: DateTimeNullableWithAggregatesFilter<"TestEventJournal"> | Date | string | null
    start_event_doc?: StringNullableWithAggregatesFilter<"TestEventJournal"> | string | null
    finished_event_doc?: StringNullableWithAggregatesFilter<"TestEventJournal"> | string | null
    file?: StringWithAggregatesFilter<"TestEventJournal"> | string
  }

  export type AppInformationWhereInput = {
    AND?: AppInformationWhereInput | AppInformationWhereInput[]
    OR?: AppInformationWhereInput[]
    NOT?: AppInformationWhereInput | AppInformationWhereInput[]
    id?: StringFilter<"AppInformation"> | string
    fileName?: StringFilter<"AppInformation"> | string
    uploadedFileName?: StringFilter<"AppInformation"> | string
    path?: StringFilter<"AppInformation"> | string
    platform?: StringFilter<"AppInformation"> | string
    fileSize?: StringFilter<"AppInformation"> | string
    appBundleId?: StringFilter<"AppInformation"> | string
    createdAt?: DateTimeFilter<"AppInformation"> | Date | string
  }

  export type AppInformationOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadedFileName?: SortOrder
    path?: SortOrder
    platform?: SortOrder
    fileSize?: SortOrder
    appBundleId?: SortOrder
    createdAt?: SortOrder
  }

  export type AppInformationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppInformationWhereInput | AppInformationWhereInput[]
    OR?: AppInformationWhereInput[]
    NOT?: AppInformationWhereInput | AppInformationWhereInput[]
    fileName?: StringFilter<"AppInformation"> | string
    uploadedFileName?: StringFilter<"AppInformation"> | string
    path?: StringFilter<"AppInformation"> | string
    platform?: StringFilter<"AppInformation"> | string
    fileSize?: StringFilter<"AppInformation"> | string
    appBundleId?: StringFilter<"AppInformation"> | string
    createdAt?: DateTimeFilter<"AppInformation"> | Date | string
  }, "id">

  export type AppInformationOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadedFileName?: SortOrder
    path?: SortOrder
    platform?: SortOrder
    fileSize?: SortOrder
    appBundleId?: SortOrder
    createdAt?: SortOrder
    _count?: AppInformationCountOrderByAggregateInput
    _max?: AppInformationMaxOrderByAggregateInput
    _min?: AppInformationMinOrderByAggregateInput
  }

  export type AppInformationScalarWhereWithAggregatesInput = {
    AND?: AppInformationScalarWhereWithAggregatesInput | AppInformationScalarWhereWithAggregatesInput[]
    OR?: AppInformationScalarWhereWithAggregatesInput[]
    NOT?: AppInformationScalarWhereWithAggregatesInput | AppInformationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppInformation"> | string
    fileName?: StringWithAggregatesFilter<"AppInformation"> | string
    uploadedFileName?: StringWithAggregatesFilter<"AppInformation"> | string
    path?: StringWithAggregatesFilter<"AppInformation"> | string
    platform?: StringWithAggregatesFilter<"AppInformation"> | string
    fileSize?: StringWithAggregatesFilter<"AppInformation"> | string
    appBundleId?: StringWithAggregatesFilter<"AppInformation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppInformation"> | Date | string
  }

  export type DeviceTagsWhereInput = {
    AND?: DeviceTagsWhereInput | DeviceTagsWhereInput[]
    OR?: DeviceTagsWhereInput[]
    NOT?: DeviceTagsWhereInput | DeviceTagsWhereInput[]
    host?: StringFilter<"DeviceTags"> | string
    udid?: StringFilter<"DeviceTags"> | string
    tags?: StringNullableFilter<"DeviceTags"> | string | null
  }

  export type DeviceTagsOrderByWithRelationInput = {
    host?: SortOrder
    udid?: SortOrder
    tags?: SortOrderInput | SortOrder
  }

  export type DeviceTagsWhereUniqueInput = Prisma.AtLeast<{
    host_udid?: DeviceTagsHostUdidCompoundUniqueInput
    AND?: DeviceTagsWhereInput | DeviceTagsWhereInput[]
    OR?: DeviceTagsWhereInput[]
    NOT?: DeviceTagsWhereInput | DeviceTagsWhereInput[]
    host?: StringFilter<"DeviceTags"> | string
    udid?: StringFilter<"DeviceTags"> | string
    tags?: StringNullableFilter<"DeviceTags"> | string | null
  }, "host_udid">

  export type DeviceTagsOrderByWithAggregationInput = {
    host?: SortOrder
    udid?: SortOrder
    tags?: SortOrderInput | SortOrder
    _count?: DeviceTagsCountOrderByAggregateInput
    _max?: DeviceTagsMaxOrderByAggregateInput
    _min?: DeviceTagsMinOrderByAggregateInput
  }

  export type DeviceTagsScalarWhereWithAggregatesInput = {
    AND?: DeviceTagsScalarWhereWithAggregatesInput | DeviceTagsScalarWhereWithAggregatesInput[]
    OR?: DeviceTagsScalarWhereWithAggregatesInput[]
    NOT?: DeviceTagsScalarWhereWithAggregatesInput | DeviceTagsScalarWhereWithAggregatesInput[]
    host?: StringWithAggregatesFilter<"DeviceTags"> | string
    udid?: StringWithAggregatesFilter<"DeviceTags"> | string
    tags?: StringNullableWithAggregatesFilter<"DeviceTags"> | string | null
  }

  export type BuildCreateInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutBuildInput
  }

  export type BuildUncheckedCreateInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type BuildCreateManyInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id: string
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    build?: BuildCreateNestedOneWithoutSessionsInput
    sessionLogs?: SessionLogCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    buildId?: string | null
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionLogs?: SessionLogUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    build?: BuildUpdateOneWithoutSessionsNestedInput
    sessionLogs?: SessionLogUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionLogs?: SessionLogUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id: string
    buildId?: string | null
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionLogCreateInput = {
    id?: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
    session: SessionCreateNestedOneWithoutSessionLogsInput
  }

  export type SessionLogUncheckedCreateInput = {
    id?: string
    sessionId: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
  }

  export type SessionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    session?: SessionUpdateOneRequiredWithoutSessionLogsNestedInput
  }

  export type SessionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionLogCreateManyInput = {
    id?: string
    sessionId: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
  }

  export type SessionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestEventJournalCreateInput = {
    id?: string
    session_id: string
    event_uuid: string
    event_type: string
    event_sub_type: string
    name: string
    scopes: string
    result?: string | null
    started_at?: Date | string | null
    finished_at?: Date | string | null
    start_event_doc?: string | null
    finished_event_doc?: string | null
    file: string
  }

  export type TestEventJournalUncheckedCreateInput = {
    id?: string
    session_id: string
    event_uuid: string
    event_type: string
    event_sub_type: string
    name: string
    scopes: string
    result?: string | null
    started_at?: Date | string | null
    finished_at?: Date | string | null
    start_event_doc?: string | null
    finished_event_doc?: string | null
    file: string
  }

  export type TestEventJournalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    event_uuid?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_sub_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scopes?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    started_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    finished_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    file?: StringFieldUpdateOperationsInput | string
  }

  export type TestEventJournalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    event_uuid?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_sub_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scopes?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    started_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    finished_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    file?: StringFieldUpdateOperationsInput | string
  }

  export type TestEventJournalCreateManyInput = {
    id?: string
    session_id: string
    event_uuid: string
    event_type: string
    event_sub_type: string
    name: string
    scopes: string
    result?: string | null
    started_at?: Date | string | null
    finished_at?: Date | string | null
    start_event_doc?: string | null
    finished_event_doc?: string | null
    file: string
  }

  export type TestEventJournalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    event_uuid?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_sub_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scopes?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    started_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    finished_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    file?: StringFieldUpdateOperationsInput | string
  }

  export type TestEventJournalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session_id?: StringFieldUpdateOperationsInput | string
    event_uuid?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    event_sub_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    scopes?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    started_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    finished_event_doc?: NullableStringFieldUpdateOperationsInput | string | null
    file?: StringFieldUpdateOperationsInput | string
  }

  export type AppInformationCreateInput = {
    id?: string
    fileName: string
    uploadedFileName: string
    path: string
    platform: string
    fileSize?: string
    appBundleId?: string
    createdAt?: Date | string
  }

  export type AppInformationUncheckedCreateInput = {
    id?: string
    fileName: string
    uploadedFileName: string
    path: string
    platform: string
    fileSize?: string
    appBundleId?: string
    createdAt?: Date | string
  }

  export type AppInformationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedFileName?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fileSize?: StringFieldUpdateOperationsInput | string
    appBundleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppInformationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedFileName?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fileSize?: StringFieldUpdateOperationsInput | string
    appBundleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppInformationCreateManyInput = {
    id?: string
    fileName: string
    uploadedFileName: string
    path: string
    platform: string
    fileSize?: string
    appBundleId?: string
    createdAt?: Date | string
  }

  export type AppInformationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedFileName?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fileSize?: StringFieldUpdateOperationsInput | string
    appBundleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppInformationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    uploadedFileName?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fileSize?: StringFieldUpdateOperationsInput | string
    appBundleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceTagsCreateInput = {
    host: string
    udid: string
    tags?: string | null
  }

  export type DeviceTagsUncheckedCreateInput = {
    host: string
    udid: string
    tags?: string | null
  }

  export type DeviceTagsUpdateInput = {
    host?: StringFieldUpdateOperationsInput | string
    udid?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceTagsUncheckedUpdateInput = {
    host?: StringFieldUpdateOperationsInput | string
    udid?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceTagsCreateManyInput = {
    host: string
    udid: string
    tags?: string | null
  }

  export type DeviceTagsUpdateManyMutationInput = {
    host?: StringFieldUpdateOperationsInput | string
    udid?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DeviceTagsUncheckedUpdateManyInput = {
    host?: StringFieldUpdateOperationsInput | string
    udid?: StringFieldUpdateOperationsInput | string
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BuildNullableRelationFilter = {
    is?: BuildWhereInput | null
    isNot?: BuildWhereInput | null
  }

  export type SessionLogListRelationFilter = {
    every?: SessionLogWhereInput
    some?: SessionLogWhereInput
    none?: SessionLogWhereInput
  }

  export type SessionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    desiredCapabilities?: SortOrder
    sessionCapabilities?: SortOrder
    nodeId?: SortOrder
    hasLiveVideo?: SortOrder
    videoRecording?: SortOrder
    deviceLogs?: SortOrder
    appProfiling?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    failureReason?: SortOrder
    deviceUdid?: SortOrder
    devicePlatform?: SortOrder
    deviceVersion?: SortOrder
    deviceName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    desiredCapabilities?: SortOrder
    sessionCapabilities?: SortOrder
    nodeId?: SortOrder
    hasLiveVideo?: SortOrder
    videoRecording?: SortOrder
    deviceLogs?: SortOrder
    appProfiling?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    failureReason?: SortOrder
    deviceUdid?: SortOrder
    devicePlatform?: SortOrder
    deviceVersion?: SortOrder
    deviceName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    desiredCapabilities?: SortOrder
    sessionCapabilities?: SortOrder
    nodeId?: SortOrder
    hasLiveVideo?: SortOrder
    videoRecording?: SortOrder
    deviceLogs?: SortOrder
    appProfiling?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    failureReason?: SortOrder
    deviceUdid?: SortOrder
    devicePlatform?: SortOrder
    deviceVersion?: SortOrder
    deviceName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type SessionLogCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    commandName?: SortOrder
    url?: SortOrder
    method?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    body?: SortOrder
    response?: SortOrder
    screenshot?: SortOrder
    isSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    eventId?: SortOrder
  }

  export type SessionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    commandName?: SortOrder
    url?: SortOrder
    method?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    body?: SortOrder
    response?: SortOrder
    screenshot?: SortOrder
    isSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    eventId?: SortOrder
  }

  export type SessionLogMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    commandName?: SortOrder
    url?: SortOrder
    method?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    body?: SortOrder
    response?: SortOrder
    screenshot?: SortOrder
    isSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    eventId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type TestEventJournalCountOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    event_uuid?: SortOrder
    event_type?: SortOrder
    event_sub_type?: SortOrder
    name?: SortOrder
    scopes?: SortOrder
    result?: SortOrder
    started_at?: SortOrder
    finished_at?: SortOrder
    start_event_doc?: SortOrder
    finished_event_doc?: SortOrder
    file?: SortOrder
  }

  export type TestEventJournalMaxOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    event_uuid?: SortOrder
    event_type?: SortOrder
    event_sub_type?: SortOrder
    name?: SortOrder
    scopes?: SortOrder
    result?: SortOrder
    started_at?: SortOrder
    finished_at?: SortOrder
    start_event_doc?: SortOrder
    finished_event_doc?: SortOrder
    file?: SortOrder
  }

  export type TestEventJournalMinOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    event_uuid?: SortOrder
    event_type?: SortOrder
    event_sub_type?: SortOrder
    name?: SortOrder
    scopes?: SortOrder
    result?: SortOrder
    started_at?: SortOrder
    finished_at?: SortOrder
    start_event_doc?: SortOrder
    finished_event_doc?: SortOrder
    file?: SortOrder
  }

  export type AppInformationCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadedFileName?: SortOrder
    path?: SortOrder
    platform?: SortOrder
    fileSize?: SortOrder
    appBundleId?: SortOrder
    createdAt?: SortOrder
  }

  export type AppInformationMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadedFileName?: SortOrder
    path?: SortOrder
    platform?: SortOrder
    fileSize?: SortOrder
    appBundleId?: SortOrder
    createdAt?: SortOrder
  }

  export type AppInformationMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    uploadedFileName?: SortOrder
    path?: SortOrder
    platform?: SortOrder
    fileSize?: SortOrder
    appBundleId?: SortOrder
    createdAt?: SortOrder
  }

  export type DeviceTagsHostUdidCompoundUniqueInput = {
    host: string
    udid: string
  }

  export type DeviceTagsCountOrderByAggregateInput = {
    host?: SortOrder
    udid?: SortOrder
    tags?: SortOrder
  }

  export type DeviceTagsMaxOrderByAggregateInput = {
    host?: SortOrder
    udid?: SortOrder
    tags?: SortOrder
  }

  export type DeviceTagsMinOrderByAggregateInput = {
    host?: SortOrder
    udid?: SortOrder
    tags?: SortOrder
  }

  export type SessionCreateNestedManyWithoutBuildInput = {
    create?: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput> | SessionCreateWithoutBuildInput[] | SessionUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutBuildInput | SessionCreateOrConnectWithoutBuildInput[]
    createMany?: SessionCreateManyBuildInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutBuildInput = {
    create?: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput> | SessionCreateWithoutBuildInput[] | SessionUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutBuildInput | SessionCreateOrConnectWithoutBuildInput[]
    createMany?: SessionCreateManyBuildInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutBuildNestedInput = {
    create?: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput> | SessionCreateWithoutBuildInput[] | SessionUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutBuildInput | SessionCreateOrConnectWithoutBuildInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutBuildInput | SessionUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: SessionCreateManyBuildInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutBuildInput | SessionUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutBuildInput | SessionUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutBuildNestedInput = {
    create?: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput> | SessionCreateWithoutBuildInput[] | SessionUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutBuildInput | SessionCreateOrConnectWithoutBuildInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutBuildInput | SessionUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: SessionCreateManyBuildInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutBuildInput | SessionUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutBuildInput | SessionUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type BuildCreateNestedOneWithoutSessionsInput = {
    create?: XOR<BuildCreateWithoutSessionsInput, BuildUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutSessionsInput
    connect?: BuildWhereUniqueInput
  }

  export type SessionLogCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput> | SessionLogCreateWithoutSessionInput[] | SessionLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionLogCreateOrConnectWithoutSessionInput | SessionLogCreateOrConnectWithoutSessionInput[]
    createMany?: SessionLogCreateManySessionInputEnvelope
    connect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
  }

  export type SessionLogUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput> | SessionLogCreateWithoutSessionInput[] | SessionLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionLogCreateOrConnectWithoutSessionInput | SessionLogCreateOrConnectWithoutSessionInput[]
    createMany?: SessionLogCreateManySessionInputEnvelope
    connect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BuildUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<BuildCreateWithoutSessionsInput, BuildUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutSessionsInput
    upsert?: BuildUpsertWithoutSessionsInput
    disconnect?: BuildWhereInput | boolean
    delete?: BuildWhereInput | boolean
    connect?: BuildWhereUniqueInput
    update?: XOR<XOR<BuildUpdateToOneWithWhereWithoutSessionsInput, BuildUpdateWithoutSessionsInput>, BuildUncheckedUpdateWithoutSessionsInput>
  }

  export type SessionLogUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput> | SessionLogCreateWithoutSessionInput[] | SessionLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionLogCreateOrConnectWithoutSessionInput | SessionLogCreateOrConnectWithoutSessionInput[]
    upsert?: SessionLogUpsertWithWhereUniqueWithoutSessionInput | SessionLogUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionLogCreateManySessionInputEnvelope
    set?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    disconnect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    delete?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    connect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    update?: SessionLogUpdateWithWhereUniqueWithoutSessionInput | SessionLogUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionLogUpdateManyWithWhereWithoutSessionInput | SessionLogUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionLogScalarWhereInput | SessionLogScalarWhereInput[]
  }

  export type SessionLogUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput> | SessionLogCreateWithoutSessionInput[] | SessionLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionLogCreateOrConnectWithoutSessionInput | SessionLogCreateOrConnectWithoutSessionInput[]
    upsert?: SessionLogUpsertWithWhereUniqueWithoutSessionInput | SessionLogUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionLogCreateManySessionInputEnvelope
    set?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    disconnect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    delete?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    connect?: SessionLogWhereUniqueInput | SessionLogWhereUniqueInput[]
    update?: SessionLogUpdateWithWhereUniqueWithoutSessionInput | SessionLogUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionLogUpdateManyWithWhereWithoutSessionInput | SessionLogUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionLogScalarWhereInput | SessionLogScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutSessionLogsInput = {
    create?: XOR<SessionCreateWithoutSessionLogsInput, SessionUncheckedCreateWithoutSessionLogsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutSessionLogsInput
    connect?: SessionWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type SessionUpdateOneRequiredWithoutSessionLogsNestedInput = {
    create?: XOR<SessionCreateWithoutSessionLogsInput, SessionUncheckedCreateWithoutSessionLogsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutSessionLogsInput
    upsert?: SessionUpsertWithoutSessionLogsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutSessionLogsInput, SessionUpdateWithoutSessionLogsInput>, SessionUncheckedUpdateWithoutSessionLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type SessionCreateWithoutBuildInput = {
    id: string
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionLogs?: SessionLogCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutBuildInput = {
    id: string
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessionLogs?: SessionLogUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutBuildInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput>
  }

  export type SessionCreateManyBuildInputEnvelope = {
    data: SessionCreateManyBuildInput | SessionCreateManyBuildInput[]
  }

  export type SessionUpsertWithWhereUniqueWithoutBuildInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutBuildInput, SessionUncheckedUpdateWithoutBuildInput>
    create: XOR<SessionCreateWithoutBuildInput, SessionUncheckedCreateWithoutBuildInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutBuildInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutBuildInput, SessionUncheckedUpdateWithoutBuildInput>
  }

  export type SessionUpdateManyWithWhereWithoutBuildInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutBuildInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    buildId?: StringNullableFilter<"Session"> | string | null
    name?: StringNullableFilter<"Session"> | string | null
    status?: StringFilter<"Session"> | string
    desiredCapabilities?: StringFilter<"Session"> | string
    sessionCapabilities?: StringFilter<"Session"> | string
    nodeId?: StringFilter<"Session"> | string
    hasLiveVideo?: BoolFilter<"Session"> | boolean
    videoRecording?: StringNullableFilter<"Session"> | string | null
    deviceLogs?: StringNullableFilter<"Session"> | string | null
    appProfiling?: StringNullableFilter<"Session"> | string | null
    startTime?: DateTimeFilter<"Session"> | Date | string
    endTime?: DateTimeNullableFilter<"Session"> | Date | string | null
    failureReason?: StringNullableFilter<"Session"> | string | null
    deviceUdid?: StringFilter<"Session"> | string
    devicePlatform?: StringFilter<"Session"> | string
    deviceVersion?: StringFilter<"Session"> | string
    deviceName?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type BuildCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildCreateOrConnectWithoutSessionsInput = {
    where: BuildWhereUniqueInput
    create: XOR<BuildCreateWithoutSessionsInput, BuildUncheckedCreateWithoutSessionsInput>
  }

  export type SessionLogCreateWithoutSessionInput = {
    id?: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
  }

  export type SessionLogUncheckedCreateWithoutSessionInput = {
    id?: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
  }

  export type SessionLogCreateOrConnectWithoutSessionInput = {
    where: SessionLogWhereUniqueInput
    create: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput>
  }

  export type SessionLogCreateManySessionInputEnvelope = {
    data: SessionLogCreateManySessionInput | SessionLogCreateManySessionInput[]
  }

  export type BuildUpsertWithoutSessionsInput = {
    update: XOR<BuildUpdateWithoutSessionsInput, BuildUncheckedUpdateWithoutSessionsInput>
    create: XOR<BuildCreateWithoutSessionsInput, BuildUncheckedCreateWithoutSessionsInput>
    where?: BuildWhereInput
  }

  export type BuildUpdateToOneWithWhereWithoutSessionsInput = {
    where?: BuildWhereInput
    data: XOR<BuildUpdateWithoutSessionsInput, BuildUncheckedUpdateWithoutSessionsInput>
  }

  export type BuildUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionLogUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionLogWhereUniqueInput
    update: XOR<SessionLogUpdateWithoutSessionInput, SessionLogUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionLogCreateWithoutSessionInput, SessionLogUncheckedCreateWithoutSessionInput>
  }

  export type SessionLogUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionLogWhereUniqueInput
    data: XOR<SessionLogUpdateWithoutSessionInput, SessionLogUncheckedUpdateWithoutSessionInput>
  }

  export type SessionLogUpdateManyWithWhereWithoutSessionInput = {
    where: SessionLogScalarWhereInput
    data: XOR<SessionLogUpdateManyMutationInput, SessionLogUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionLogScalarWhereInput = {
    AND?: SessionLogScalarWhereInput | SessionLogScalarWhereInput[]
    OR?: SessionLogScalarWhereInput[]
    NOT?: SessionLogScalarWhereInput | SessionLogScalarWhereInput[]
    id?: StringFilter<"SessionLog"> | string
    sessionId?: StringFilter<"SessionLog"> | string
    commandName?: StringNullableFilter<"SessionLog"> | string | null
    url?: StringFilter<"SessionLog"> | string
    method?: StringFilter<"SessionLog"> | string
    title?: StringFilter<"SessionLog"> | string
    subtitle?: StringNullableFilter<"SessionLog"> | string | null
    body?: StringNullableFilter<"SessionLog"> | string | null
    response?: StringFilter<"SessionLog"> | string
    screenshot?: StringNullableFilter<"SessionLog"> | string | null
    isSuccess?: BoolNullableFilter<"SessionLog"> | boolean | null
    createdAt?: DateTimeFilter<"SessionLog"> | Date | string
    updatedAt?: DateTimeFilter<"SessionLog"> | Date | string
    eventId?: StringNullableFilter<"SessionLog"> | string | null
  }

  export type SessionCreateWithoutSessionLogsInput = {
    id: string
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    build?: BuildCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutSessionLogsInput = {
    id: string
    buildId?: string | null
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutSessionLogsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutSessionLogsInput, SessionUncheckedCreateWithoutSessionLogsInput>
  }

  export type SessionUpsertWithoutSessionLogsInput = {
    update: XOR<SessionUpdateWithoutSessionLogsInput, SessionUncheckedUpdateWithoutSessionLogsInput>
    create: XOR<SessionCreateWithoutSessionLogsInput, SessionUncheckedCreateWithoutSessionLogsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutSessionLogsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutSessionLogsInput, SessionUncheckedUpdateWithoutSessionLogsInput>
  }

  export type SessionUpdateWithoutSessionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    build?: BuildUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutSessionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyBuildInput = {
    id: string
    name?: string | null
    status?: string
    desiredCapabilities: string
    sessionCapabilities: string
    nodeId: string
    hasLiveVideo: boolean
    videoRecording?: string | null
    deviceLogs?: string | null
    appProfiling?: string | null
    startTime?: Date | string
    endTime?: Date | string | null
    failureReason?: string | null
    deviceUdid: string
    devicePlatform: string
    deviceVersion: string
    deviceName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionLogs?: SessionLogUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionLogs?: SessionLogUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    desiredCapabilities?: StringFieldUpdateOperationsInput | string
    sessionCapabilities?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    hasLiveVideo?: BoolFieldUpdateOperationsInput | boolean
    videoRecording?: NullableStringFieldUpdateOperationsInput | string | null
    deviceLogs?: NullableStringFieldUpdateOperationsInput | string | null
    appProfiling?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    deviceUdid?: StringFieldUpdateOperationsInput | string
    devicePlatform?: StringFieldUpdateOperationsInput | string
    deviceVersion?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionLogCreateManySessionInput = {
    id?: string
    commandName?: string | null
    url: string
    method: string
    title: string
    subtitle?: string | null
    body?: string | null
    response: string
    screenshot?: string | null
    isSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    eventId?: string | null
  }

  export type SessionLogUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionLogUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionLogUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    commandName?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    response?: StringFieldUpdateOperationsInput | string
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    isSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BuildCountOutputTypeDefaultArgs instead
     */
    export type BuildCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuildCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuildDefaultArgs instead
     */
    export type BuildArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuildDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionLogDefaultArgs instead
     */
    export type SessionLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TestEventJournalDefaultArgs instead
     */
    export type TestEventJournalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TestEventJournalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppInformationDefaultArgs instead
     */
    export type AppInformationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppInformationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeviceTagsDefaultArgs instead
     */
    export type DeviceTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeviceTagsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}